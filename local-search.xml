<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>缓存穿透-击穿-雪崩</title>
    <link href="/2022/12/16/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F-%E5%87%BB%E7%A9%BF-%E9%9B%AA%E5%B4%A9/"/>
    <url>/2022/12/16/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F-%E5%87%BB%E7%A9%BF-%E9%9B%AA%E5%B4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h1><p>添加缓存的目的一般都是为了减轻数据库的读写压力，同时提升服务性能。这涉及到项目中实际的开发经验，即数据库的读写速度往往会是项目瓶颈。</p><p>操作系统中：cpu运行速度&gt;缓存读写速度&gt;硬盘读写速度，增加缓存、读写分离等方法都是用来优化数据库读写耗时。</p><h1 id="2-缓存穿透"><a href="#2-缓存穿透" class="headerlink" title="2. 缓存穿透"></a>2. 缓存穿透</h1><h2 id="2-1-需求"><a href="#2-1-需求" class="headerlink" title="2.1 需求"></a>2.1 需求</h2><p>用户需要查询数据库中某一项信息，优先去缓存中查询<br>2.1.1 如果缓存中保存了信息，则在缓存中命中需要的信息，直接返回，不进行后续的查询数据库操作。</p><p>2.1.2 如果缓存中查询信息失败，则从数据库中查询数据，如果查询到了，则将数据放入缓存（会涉及设置失效时间，查询频率等操作），并返回信息。</p><p>2.1.3 如果数据库也查询失败，则直接返回查询失败提醒。</p><p>分析流程2.1.1、2.1.2、2.1.3，假设存在如下场景，有人恶意伪造大量数据库中不存在的id请求，大量涌入服务器，则此时流程2.1.1因为缓存没有数据会被跳过，流程2.1.2也因为没有缓存没有数据会被跳过，流程2.1.3会对每次请求都检索一遍数据库表。可以把这个时候缓存都被跳过的现象成为缓存穿透，因为能加速服务器性能的缓存都被跳过，每次都是在硬盘上读写遍历，这必然造成系统性能下降。</p><h2 id="2-2-解决办法"><a href="#2-2-解决办法" class="headerlink" title="2.2 解决办法"></a>2.2 解决办法</h2><h2 id="2-2-1-参数校验"><a href="#2-2-1-参数校验" class="headerlink" title="2.2.1 参数校验"></a>2.2.1 参数校验</h2><p>参数校验，拦截掉不必要发出请求的某些恶意id，例如被北京ip发送的id范围是在01XXX和03XXX之间，则拦截其他数字开头的id.</p><h2 id="2-2-2-布隆过滤器"><a href="#2-2-2-布隆过滤器" class="headerlink" title="2.2.2 布隆过滤器"></a>2.2.2 布隆过滤器</h2><p>数据库数据量不是过大时，可将所有数据提前存储到内存，在这种场景下，使用布隆过滤器减少数据加载到缓存时候，内存使用量。布隆过滤器特点<strong>缓存查询得到的数据库不一定存在；但缓存查询不到数据库一定不存在</strong>。</p><p>同时由于缓存中的数据需要及时和数据库进行同步更新。否则数据库新添加的信息，因为缓存中不存在，布隆过滤器会拦截掉这些新增的正常请求。这在一些业务场景是无法接受的，但在对这种情况可以接受的业务场景前提下，布隆过滤器虽然会有少量缓存不存在的请求发送给数据库，但更多的是会避免掉很多数据不存在的数据库访问。</p><h2 id="2-2-3-缓存空值"><a href="#2-2-3-缓存空值" class="headerlink" title="2.2.3 缓存空值"></a>2.2.3 缓存空值</h2><p>受限于应用场景，布隆过滤器使用并不多，而是采用缓存空值方案。核心思想为，无论数据库中是否查询得到数据，都将数据放入缓存，数据存在时，请求id对应值为该真实数据；数据不存在时，请求id对应值为空值。</p><h1 id="3-缓存击穿"><a href="#3-缓存击穿" class="headerlink" title="3. 缓存击穿"></a>3. 缓存击穿</h1><h2 id="3-1-需求"><a href="#3-1-需求" class="headerlink" title="3.1 需求"></a>3.1 需求</h2><p>假设在每年轰轰烈烈的春节火车票抢票中，某一列车次在春节一个月内对应的那个key在缓存中过期失效了，涉及一百万人，每个人都疯狂点抢票，这个时候缓存失效，数据库接受大量请求，可能造成死机或者物理机温度过高直接宕机。</p><h2 id="3-2-调整key有效时间"><a href="#3-2-调整key有效时间" class="headerlink" title="3.2 调整key有效时间"></a>3.2 调整key有效时间</h2><ul><li>直接延长缓存时间，</li><li>有接收到了对于key的查询，就重置key有效期</li><li>某些长期热点展示数据设置永久有效，由运维人员根据时间业务等情况，手动调整数据从数据库上载或卸载到缓存。</li></ul><h2 id="3-3-请求加锁"><a href="#3-3-请求加锁" class="headerlink" title="3.3 请求加锁"></a>3.3 请求加锁</h2><p>同一时刻，只有一个请求拥有访问数据库的锁，即加锁实现限流。基于lock接口或sychronized关键字</p><h1 id="4-缓存雪崩"><a href="#4-缓存雪崩" class="headerlink" title="4. 缓存雪崩"></a>4. 缓存雪崩</h1><h2 id="4-1-需求"><a href="#4-1-需求" class="headerlink" title="4.1 需求"></a>4.1 需求</h2><p>缓存中的多个key同时失效（恰好过期时间都是在一个时刻）或者缓存服务器物理机宕机失效，都会造成缓存雪崩，同一时刻大量请求涌入数据库。</p><h2 id="4-2-过期时间避免统一"><a href="#4-2-过期时间避免统一" class="headerlink" title="4.2 过期时间避免统一"></a>4.2 过期时间避免统一</h2><p>多个key都在某一时刻同时过期，因此可以在设定的过期时间基础上，添加一定范围（例如3600秒）随机数时间，避免高并发时，出现key同时失效。</p><h2 id="4-3-架构设计"><a href="#4-3-架构设计" class="headerlink" title="4.3 架构设计"></a>4.3 架构设计</h2><p>物理机宕机，可在设计阶段设计主从缓存服务器，slaves缓存服务器及时同步master缓存服务器中的信息，一旦master挂了，salves们竞争上岗，其中某一个slave将承担master的缓存任务。（redis哨兵模式）</p>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>消息中间件数据结构</title>
    <link href="/2022/12/16/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2022/12/16/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="总结接触到的中间件的相关数据结构"><a href="#总结接触到的中间件的相关数据结构" class="headerlink" title="总结接触到的中间件的相关数据结构"></a>总结接触到的中间件的相关数据结构</h1><p>更新时间</p><h6 id="Thu-Dec-15-11-43-58-CST-2022"><a href="#Thu-Dec-15-11-43-58-CST-2022" class="headerlink" title="Thu Dec 15 11:43:58 CST 2022"></a>Thu Dec 15 11:43:58 CST 2022</h6><h1 id="B树-x2F-B-树"><a href="#B树-x2F-B-树" class="headerlink" title="B树&#x2F;B+树"></a>B树&#x2F;B+树</h1><p>关系型数据库核心存储结构(mysql mongodb etcd)</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul><li>有序存储</li><li>查询快</li><li>就地更新</li></ul><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>B树&#x2F;B+树也叫做多路平衡搜索树，红黑树、acl树被称为平衡二叉搜索树，中序遍历得到有序数据。根据数据库常见存储场景，B树系列一般在磁盘中使用，映射着磁盘页，二叉搜索树一般在内存中使用。<br>B树一个节点包含多个元素，形成一颗“扁平矮胖树”，每个节点之间进行转换代表一次I&#x2F;O操作，存在时间消耗。“矮胖”树节点遍历耗时更少。</p><h3 id="B树和B-树"><a href="#B树和B-树" class="headerlink" title="B树和B+树"></a>B树和B+树</h3><ul><li><p>B树节点中既存储数据信息，又会存储素引信息，查找结点的时候，也有可能查到数据，<strong>内存消耗更小</strong>，一般(etcd)内存中使用。</p></li><li><p>B+树叶子节点当中解存储数据信息，又会存储索引信息，非叶子节点只有索引信息,<strong>树木更加矮胖降低层高，同时因为只有索引所以加载到内存中的无效数据更少</strong>，一般(mysql、mongodb)磁盘中使用。</p></li><li><p>B树和B+树之间进行刷盘速度更快，对比B+树和其他类型树之间的组合。</p></li></ul><h3 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h3><p>kv存储数据库，提供强一致性、高可用的数据访问服务，不同于redis，etcd主要用于提供读服务</p><h2 id="B-树在MySQL中的应用"><a href="#B-树在MySQL中的应用" class="headerlink" title="B+树在MySQL中的应用"></a>B+树在MySQL中的应用</h2><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>索引对应一颗B+树，每插入一个节点，Innodb对应B+树上就会把数据索引更新到节点上。索引划分为聚集索引和辅助索引。</p><h4 id="聚集索引"><a href="#聚集索引" class="headerlink" title="聚集索引"></a>聚集索引</h4><p>B+树叶子节点存储一行一行的结构化记录，也为主键索引</p><h4 id="辅助索引"><a href="#辅助索引" class="headerlink" title="辅助索引"></a>辅助索引</h4><p>除开聚集索引以外的其他索引，叶子节点存储的是索引和bookmark(例如一行记录的主键id)。辅助索引查找记录，要使用聚集索引查找对应叶子节点。</p><h4 id="涉及优化"><a href="#涉及优化" class="headerlink" title="涉及优化"></a>涉及优化</h4><p>已经了解索引是B+树结构，针对B+树探讨索引优化和索引失效，提出最左匹配规则（组合索引，从左到右依次匹配，契合B+树中序遍历有序的特点）和索引覆盖（直接在辅助索引中就可以找到所有索引数据，不用再在聚集索引中补充）</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>遵循ACID（原子、一致、隔离、持久），事务使用锁来实现。可能会出现两类问题：死锁问题和读异常。</p><ul><li>死锁问题中的交叉读锁，针对此问题由于InnoDB最低支持行锁，可通过聚集索引查询节点调整加锁顺序</li></ul><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>B+树叶子节点之间都是互联的，在执行where范围查询的时候，直接在最底层叶子节点之间进行链表时有序查询（中序遍历有序），不必要从根节点出发。</p><h1 id="时间轮"><a href="#时间轮" class="headerlink" title="时间轮"></a>时间轮</h1><p>提供海量定时任务检测，linux内核、kafka、skynet、netty等都使用此数据结构执行定时任务。<br>传统数据结构实现定时任务，基于红黑树、最小堆、跳表等有序结构实现定时器，找最小值，触发定时任务，按照触发时间顺序进行组织</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>时间轮类似于圆形表，包含秒针数组、分针数组、时钟数组，指针在秒针数组上运行过一圈后，分针数组中指针后移一位。分层的设计暂用60+60+12 &#x3D; 132个内存，能表示43200种内存格子。<br>只关注最近60秒要执行的任务，其他层的任务进行稀疏存储。</p><p>传统数据结构实现定时任务，增加定时任务时间复杂度由于需要保证有序，时间复杂度为$O(log_{2}n)$。时间轮的方式由于数据已经相对有序，增加的时间复杂度为O(1)</p><h2 id="Kafka中的应用"><a href="#Kafka中的应用" class="headerlink" title="Kafka中的应用"></a>Kafka中的应用</h2><p>kafka中的时间轮每层为20ms,则20<em>20</em>20 &#x3D; 8000ms &#x3D; 8s，kafka支持最小8s的定时任务</p><h2 id="补充-1"><a href="#补充-1" class="headerlink" title="补充"></a>补充</h2><p>时间轮一般都是在多线程环境下使用，红黑树、最小堆主要为单线程环境，跳表也为多线程环境。</p><h1 id="跳表"><a href="#跳表" class="headerlink" title="跳表"></a>跳表</h1><p>提供高并发有效存储，应用中间件包含</p><ul><li>redis v-zset 有序集合</li><li>leveldb（一种存储引擎，类似mysql的InnoDB,嵌入式中使用，不支持网络存储）、rocksdb（leveldb改进版）</li></ul><h2 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h2><p>多层级的有序链表结构，有序单链表搜索具体某个节点，时间复杂度为O(n),数组使用二分查找能达到$O(logn)$,因此为了让链表能同样达到$O(logn)$，提出在单链表的基础上增加层级，得到跳表结构。<br><img src="/img/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/../../../img/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%B7%B3%E8%A1%A8.jpg" alt="跳表"><br><img src="/img/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/../../../img/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%B7%B3%E8%A1%A82.jpg" alt="跳表"></p><p>查找的时候，从上往下跳，即从最上层开始进行查询。</p><p>跳表也是一种随机性的数据结构，redis要求跳表中的节点个数大于256个，这样才能保证整体查找时间复杂度能达到$O(logn)$ </p><h2 id="跳表在LSM-Tree中的应用"><a href="#跳表在LSM-Tree中的应用" class="headerlink" title="跳表在LSM-Tree中的应用"></a>跳表在LSM-Tree中的应用</h2><p>提供更高写性能以及空间利用率的数据库存储方式，rocksdb中的重要结构，也包含跳表思想。<br><img src="/img/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/../../../img/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/LSM1.jpg" alt="LSM-tree"></p>]]></content>
    
    
    <categories>
      
      <category>数据结构，消息中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>消息中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>消息队列概述</title>
    <link href="/2022/12/16/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    <url>/2022/12/16/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="消息队列的理解"><a href="#消息队列的理解" class="headerlink" title="消息队列的理解"></a>消息队列的理解</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>分布式消息队列是一种应用之间<strong>异步</strong>通信的方式，主要由三部分组成生产端、代理、消费端<br><img src="/img/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/../../../img/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/MQ1.jpg" alt="MQ"><br>生产端：将业务消息进行预处理实例化，产生消息发送给broker。</p><p>代理：是整个消息的服务端，核心部分，处理消息单元，负责消息的存储、投递以及队列的一切其他附加的功能</p><p>消费端：负责消息的消费，根据消息承载的逻辑进行相应的处理</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h3><p>在实时性要求不严格的场景，例如用户注册发送验证码、下单通知发送优惠卷等。生产端发出消息给broker后，不用等待消费端给出反馈，可以处理其他业务。消费端处理broker中的信息，异步的给生产端回复结果。<br><img src="/img/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/../../../img/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/MQ2.jpg" alt="异步处理"></p><h3 id="应用解耦"><a href="#应用解耦" class="headerlink" title="应用解耦"></a>应用解耦</h3><p>将某些相关但耦合度不高的功能进行关联，例如订单系统与优惠卷积分系统。这两个系统有关系但不紧密，就可以利用MQ作为桥梁，利用MQ作为消息传递媒介。也就允许这两部分系统甚至可以采用不同的语言、框架实现。<br><img src="/img/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/../../../img/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/MQ3.jpg" alt="应用解耦"></p><h3 id="流量削峰"><a href="#流量削峰" class="headerlink" title="流量削峰"></a>流量削峰</h3><p>在类似秒杀场景中的大流量涌入，需求处理不完的一些服务，为了平衡高并发的请求，将大量请求发送给MQ,根据MQ的存储和分发功能平稳处理业务，起到一个大流量缓冲的作用。<br><img src="/img/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/../../../img/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/MQ4.jpg" alt="流量削锋"></p><h2 id="常用消息队列中间件"><a href="#常用消息队列中间件" class="headerlink" title="常用消息队列中间件"></a>常用消息队列中间件</h2><ul><li>ActiveMQ(中小型公司低吞吐量)</li><li>RabbitMQ</li><li>Kafka（数据量大，吞吐量要求高）</li><li>RocketMQ（数据量大，吞吐量要求高）</li></ul>]]></content>
    
    
    <categories>
      
      <category>消息队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>消息队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程读写（生产者消费者模型）</title>
    <link href="/2022/12/13/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%BB%E5%86%99/"/>
    <url>/2022/12/13/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%BB%E5%86%99/</url>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>一个线程读取一个excel文件，储存到内存（此处为Queue）,另一个线程从队列中读取文件，并写入新的excel文件，即生产者消费者模型。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><p><img src="/../img/RWExcel/%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95.jpg" alt="目录截图"></p><h4 id="pom导入依赖"><a href="#pom导入依赖" class="headerlink" title="pom导入依赖"></a>pom导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>MultiThreadRW<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>MultiThreadRW<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.apache.org<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.poi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>poi-ooxml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="Java多线程读写"><a href="#Java多线程读写" class="headerlink" title="Java多线程读写"></a>Java多线程读写</h4><p> 故意设计为一个线程读，两个线程写<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org;<br><br><span class="hljs-keyword">import</span> cn.hutool.poi.excel.ExcelReader;<br><span class="hljs-keyword">import</span> cn.hutool.poi.excel.ExcelUtil;<br><span class="hljs-keyword">import</span> cn.hutool.poi.excel.ExcelWriter;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.concurrent.BlockingQueue;<br><span class="hljs-keyword">import</span> java.util.concurrent.LinkedBlockingQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <br>&#123;<br><span class="hljs-comment">//    更改为本地路径</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">readFileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:/Pro/MultiThreadRW/src/file/test.xlsx&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span>  <span class="hljs-variable">writeFileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:/Pro/MultiThreadRW/src/file/test2.xlsx&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> BlockingQueue&lt;List&lt;String&gt;&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;&gt;();<br><br>    <span class="hljs-comment">// 生产者</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-comment">// 读取excel文件</span><br>            <span class="hljs-type">ExcelReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> ExcelUtil.getReader(readFileName);<br>            List&lt;List&lt;Object&gt;&gt; lists = reader.read();<br><br>            <span class="hljs-comment">// 将对象按行写入队列</span><br>            <span class="hljs-keyword">for</span> (List&lt;Object&gt; list:lists ) &#123;<br>                <span class="hljs-keyword">try</span>&#123;<br>                    queue.put(cast(list));<br>                    System.out.println(<span class="hljs-string">&quot;[&quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot;]生产者生产一行数据...&quot;</span>);<br><br>                &#125;<br>                <span class="hljs-keyword">catch</span> (InterruptedException e)&#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            end = <span class="hljs-literal">true</span>;<br>            reader.close();<br>        &#125;<br><br>        <span class="hljs-comment">// object 转 String</span><br>        <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">cast</span><span class="hljs-params">(List&lt;Object&gt; list)</span>&#123;<br>            List&lt;String&gt; tmp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-keyword">for</span> (Object li :list ) &#123;<br>                tmp.add((String) li);<br>            &#125;<br>            <span class="hljs-keyword">return</span> tmp;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 消费者</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-type">ExcelWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> ExcelUtil.getWriter(writeFileName);<br>            <span class="hljs-comment">// 当输入流完成或者队列为空</span><br>            <span class="hljs-keyword">while</span> (!end || !queue.isEmpty())&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 拿出一条数据</span><br>                    List&lt;String&gt; list = queue.take();<br>                    List&lt;List&lt;String&gt;&gt; row = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>                    row.add(list);<br><br>                    <span class="hljs-comment">// 写入到输出流中</span><br>                    writer.write(row,<span class="hljs-literal">true</span>);<br>                    System.out.println(<span class="hljs-string">&quot;[&quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot;]消费者消费一行数据...&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">catch</span> (InterruptedException e)&#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            writer.close();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 主函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">( String[] args )</span> &#123;<br>        <span class="hljs-type">App</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">App</span>();<br>        <span class="hljs-type">Producer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> app.<span class="hljs-keyword">new</span> <span class="hljs-title class_">Producer</span>();<br>        <span class="hljs-type">Consumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> app.<span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>();<br>        <span class="hljs-type">Consumer</span> <span class="hljs-variable">consumer2</span> <span class="hljs-operator">=</span> app.<span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>();<br><br>        producer.start();<br>        consumer.start();<br>        consumer2.start();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            producer.join();<br>            consumer.join();<br>            consumer2.join();<br>            System.out.println(<span class="hljs-string">&quot;[&quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot;]完成...&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></p><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cmd">### <span class="hljs-number">0</span>: [小明, 小明, 小明, 小明, 小明, 小明, 小明, 小明, 小明]<br>### <span class="hljs-number">1</span>: [小李, 小李, 小李, 小李, 小李, 小李, 小李, 小李, 小李]<br>### <span class="hljs-number">2</span>: [小红, 小红, 小红, 小红, 小红, 小红, 小红, 小红, 小红]<br>### <span class="hljs-number">3</span>: [小风, 小风, 小风, 小风, 小风, 小风, 小风, 小风, 小风]<br>### <span class="hljs-number">4</span>: [小明, 小明, 小明, 小明, 小明, 小明, 小明, 小明, 小明]<br>### <span class="hljs-number">5</span>: [小李, 小李, 小李, 小李, 小李, 小李, 小李, 小李, 小李]<br>### <span class="hljs-number">6</span>: [小红, 小红, 小红, 小红, 小红, 小红, 小红, 小红, 小红]<br>### <span class="hljs-number">7</span>: [小风, 小风, 小风, 小风, 小风, 小风, 小风, 小风, 小风]<br>### <span class="hljs-number">8</span>: [小明, 小明, 小明, 小明, 小明, 小明, 小明, 小明, 小明]<br>### <span class="hljs-number">9</span>: [小李, 小李, 小李, 小李, 小李, 小李, 小李, 小李, 小李]<br>### <span class="hljs-number">10</span>: [小红, 小红, 小红, 小红, 小红, 小红, 小红, 小红, 小红]<br>### <span class="hljs-number">11</span>: [小风, 小风, 小风, 小风, 小风, 小风, 小风, 小风, 小风]<br>[Thread-<span class="hljs-number">0</span>]生产者产生一行数据...<br>[Thread-<span class="hljs-number">0</span>]生产者产生一行数据...<br>[Thread-<span class="hljs-number">0</span>]生产者产生一行数据...<br>[Thread-<span class="hljs-number">0</span>]生产者产生一行数据...<br>[Thread-<span class="hljs-number">0</span>]生产者产生一行数据...<br>[Thread-<span class="hljs-number">0</span>]生产者产生一行数据...<br>[Thread-<span class="hljs-number">0</span>]生产者产生一行数据...<br>[Thread-<span class="hljs-number">0</span>]生产者产生一行数据...<br>[Thread-<span class="hljs-number">0</span>]生产者产生一行数据...<br>[Thread-<span class="hljs-number">0</span>]生产者产生一行数据...<br>[Thread-<span class="hljs-number">0</span>]生产者产生一行数据...<br>[Thread-<span class="hljs-number">0</span>]生产者产生一行数据...<br>[Thread-<span class="hljs-number">2</span>]消费者消费一行数据...<br>[Thread-<span class="hljs-number">1</span>]消费者消费一行数据...<br>[Thread-<span class="hljs-number">2</span>]消费者消费一行数据...<br>[Thread-<span class="hljs-number">1</span>]消费者消费一行数据...<br>[Thread-<span class="hljs-number">2</span>]消费者消费一行数据...<br>[Thread-<span class="hljs-number">1</span>]消费者消费一行数据...<br>[Thread-<span class="hljs-number">1</span>]消费者消费一行数据...<br>[Thread-<span class="hljs-number">2</span>]消费者消费一行数据...<br>[Thread-<span class="hljs-number">2</span>]消费者消费一行数据...<br>[Thread-<span class="hljs-number">1</span>]消费者消费一行数据...<br>[Thread-<span class="hljs-number">2</span>]消费者消费一行数据...<br>[Thread-<span class="hljs-number">1</span>]消费者消费一行数据...<br>rCnt=<span class="hljs-number">12</span><br>[main]完成...<br>wCnt=<span class="hljs-number">12</span><br><br></code></pre></td></tr></table></figure><p><a href="https://github.com/OoWaterMelonS/MultiThreadRW.git">源码链接</a></p>]]></content>
    
    
    <categories>
      
      <category>Java并发编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>merge和rebase的区别</title>
    <link href="/2022/12/03/merge%E5%92%8Crebase%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/12/03/merge%E5%92%8Crebase%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1VG411F7rB/?spm_id_from=333.999.0.0&vd_source=8eadec89e5e4e2ee8628b6b653608d3f">git rebase和 git merge的区别</a><br>感觉浅显好入门，一看图简单明白了其中的区别<br><img src="/../img/video/merge-and-rebase.jpg" alt="**merge**"></p><p><img src="/../img/video/merge-and-rebase2.jpg" alt="**rebase**"></p>]]></content>
    
    
    <categories>
      
      <category>github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>merge Vs rebase</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习视频</title>
    <link href="/2022/12/03/%E5%AD%A6%E4%B9%A0%E8%A7%86%E9%A2%91/"/>
    <url>/2022/12/03/%E5%AD%A6%E4%B9%A0%E8%A7%86%E9%A2%91/</url>
    
    <content type="html"><![CDATA[<p>多看多学，保持思考。</p><h2 id="体系阅读"><a href="#体系阅读" class="headerlink" title="体系阅读"></a>体系阅读</h2><p><strong>2022&#x2F;12&#x2F;3</strong><br>大厂分享☞☞<a href="https://www.bilibili.com/video/BV1ND4y1Y792/?spm_id_from=333.788&vd_source=8eadec89e5e4e2ee8628b6b653608d3f">大厂文章速读</a></p><h3 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h3><h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><h2 id="数据库阅读"><a href="#数据库阅读" class="headerlink" title="数据库阅读"></a>数据库阅读</h2><p><strong>2022&#x2F;12&#x2F;3</strong><br><a href="https://www.bilibili.com/video/BV1QG411j7ZZ/?spm_id_from=333.999.0.0&vd_source=8eadec89e5e4e2ee8628b6b653608d3f">冷门又重要的6个技巧，高并发数据库优化</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">1.打破范式设计，冗余少量字段方便查询，需要注意源表和冗余表保证同一事务写。<br>2.关联关系在业务层面约束，不依赖数据库外键<br>3.字段拓展性，如模板信息这种结构不清晰的字段使用json类型，json检索的问题我的想法是少量key使用虚拟列并建立索引，多条件检索直接异构es<br>4.冷热分离，源表拆分成多张表，可以把频繁变更的字段放在主表，使用率较低的放在副表，判断依据可以是创建时间、业务域<br>5.服务拆分在分片字段选择上尽量考虑使用本地事务，让同业务的不同sql命中同一个分表，以避免使用分布式事务<br>6.尽量使用单表维度sql，原因：join性能差，后期分库分表更方便，前瞻性设计要考虑使用哪种ID主键策略<br></code></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1584y1v7hc/?spm_id_from=333.999.0.0&vd_source=8eadec89e5e4e2ee8628b6b653608d3f">书写高质量SQL的30条建议</a><br>需要在实践中使用，但看完挺难受的，特别这AI配音~~~😫😫</p><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p><a href="https://www.bilibili.com/video/BV1VG411F7rB/?spm_id_from=333.999.0.0&vd_source=8eadec89e5e4e2ee8628b6b653608d3f">git rebase和 git merge的区别</a><br>感觉浅显好入门，一看图简单明白了其中的区别</p><p><a href="https://www.bilibili.com/video/BV1C64y1z7Hn/?spm_id_from=333.788&vd_source=8eadec89e5e4e2ee8628b6b653608d3f">Git 工作流</a></p>]]></content>
    
    
    <categories>
      
      <category>学习视频</category>
      
    </categories>
    
    
    <tags>
      
      <tag>视频</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式锁（二）</title>
    <link href="/2022/12/03/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2022/12/03/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>分布式锁（一）</title>
    <link href="/2022/12/03/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2022/12/03/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="为什么我们需要一把分布式锁？"><a href="#为什么我们需要一把分布式锁？" class="headerlink" title="为什么我们需要一把分布式锁？"></a>为什么我们需要一把分布式锁？</h3><ul><li>为了效率(efficiency)，协调各个客户端避免做重复的工作。即使锁偶尔失效了，只是可能把某些操作多做一遍而已，不会产生其它的不良后果。比如重复发送了一封同样的 email（当然这取决于业务应用的容忍度）。</li><li>为了正确性(correctness)。在任何情况下都不允许锁失效的情况发生，因为一旦发生，就可能意味着数据不一致(inconsistency)，数据丢失，文件损坏，订单重复，超卖或者其它严重的问题。</li></ul><p>###分布式锁的三个属性</p><ul><li><p>互斥（Mutual Exclusion），这是锁最基本的功能，同一时刻只能有一个客户端持有锁；</p></li><li><p>避免死锁（Dead lock free），如果某个客户端获得锁之后花了太长时间处理，或者客户端发生了故障，锁无法释放会导致整个处理流程无法进行下去，所以要避免死锁。最常见的是通过设置一个 TTL(Time To Live，存活时间) 来避免死锁。</p></li><li><p>容错（Fault tolerance），为避免单点故障，锁服务需要具有一定容错性。<br>  大体有两种容错方式，一种是<strong>锁服务本身是一个集群</strong>，能够自动故障切换(ZooKeeper、etcd)；</p><p>  <strong>另一种是客户端向多个独立的锁服务发起请求，其中某个锁服务故障时仍然可以从其他锁服务读取到锁信息(Redlock)，代价是一个客户端要获取多把锁</strong>，并且要求每台机器的时钟都是一样的，否则 TTL 会不一致，可能有的机器会提前释放锁，有的机器会太晚释放锁，导致出现问题。</p></li></ul><h3 id="常见的分布式锁实现方案"><a href="#常见的分布式锁实现方案" class="headerlink" title="常见的分布式锁实现方案"></a>常见的分布式锁实现方案</h3><ul><li><a href="%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%EF%BC%88%E4%BA%8C%EF%BC%89.md">Redis</a> </li><li>MySQL</li><li>ZooKeeper</li></ul><p>具体解决方案后续依次介绍补充完善</p>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式锁</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot上传文件到本地/OSS</title>
    <link href="/2022/12/03/springboot%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%AC%E5%9C%B0-OSS/"/>
    <url>/2022/12/03/springboot%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%AC%E5%9C%B0-OSS/</url>
    
    <content type="html"><![CDATA[<p>可供参照链接</p><p><a href="https://www.bilibili.com/video/BV1TK411Z7ad/?is_story_h5=false&p=1&share_from=ugc&share_medium=android&share_plat=android&share_session_id=1f2b6efd-8fb7-4166-a4bb-e493aeea3c68&share_source=GENERIC&share_tag=s_i&timestamp=1669737113&unique_k=VUhyMor&vd_source=8eadec89e5e4e2ee8628b6b653608d3f">SpringBoot上传文件到本地&#x2F;OSS视频</a></p><p><a href="https://github.com/OoWaterMelonS/SpringCloudAndVue">文件上传模块</a></p><p><img src="/../img/SpringBoot%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%AC%E5%9C%B0OSS/SpringBoot%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6.jpg" alt="文件上传"></p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>过滤器和拦截器的区别</title>
    <link href="/2022/12/03/%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/12/03/%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h3 id="过滤器（Filter）和拦截器（Interceptor）的区别"><a href="#过滤器（Filter）和拦截器（Interceptor）的区别" class="headerlink" title="过滤器（Filter）和拦截器（Interceptor）的区别"></a>过滤器（Filter）和拦截器（Interceptor）的区别</h3><ol><li><p>实现原理不同</p><p> 过滤器基于函数回调，一般自定义过滤器都会实现一个DoFilter()方法，这个方法包含一个FilterChain参数，此参数实际为一个回调接口。</p><p> 拦截器基于Java反射机制（动态代理）实现。</p></li><li><p>适用范围不同</p><p> 过滤器Filter实现基于javax.servlet.Filter接口，此接口在Servlet规范中定义，因此过滤器Filter的使用依赖于Tomcat等容器，导致它只能在Web程序中使用。</p><p> 拦截器Interceptor是Spring的一个组件，由Spring容器管理，可以单独使用。因此拦截器不仅能应用于web程序，也可以应用于Application、Swing等程序中。</p></li><li><p>使用场景不同</p><p> 过滤器Filter通常用来实现通用功能过滤，例如：敏感词过滤、<strong>响应数据</strong>压缩等功能。</p><p> 拦截器Interceptor更接近业务系统，主要用来实现项目中的业务判断，例如：日志记录、权限判断等业务。</p></li><li><p>触发时机不同</p><p> Filter是在请求进入Tomcat等容器后，在<strong>进入Servlet之前进行预处理，当Servlet完成处理后请求结束</strong>。</p><p> Inteceptor 是在请求<strong>进入Servlet后，在进入controller之前进行预处理，controller中渲染对应的视图后请求结束</strong>。</p></li><li><p>拦截的请求范围不同</p><p> 请求的执行顺序是：<strong>进入Tomcat等容器-&gt; 进入Filter-&gt;进入Servlet-&gt; 进入Inteceptor-&gt; 进入控制器Controller</strong>。</p><p> Filter和Interceptor的执行时间点不同，先执行Filter后再执行Interceptor,再是Controller，即真正要调用的方法。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>待归类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>接口数据脱敏</title>
    <link href="/2022/12/03/%E6%8E%A5%E5%8F%A3%E6%95%B0%E6%8D%AE%E8%84%B1%E6%95%8F/"/>
    <url>/2022/12/03/%E6%8E%A5%E5%8F%A3%E6%95%B0%E6%8D%AE%E8%84%B1%E6%95%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h3><p>项目业务(银行、医院、购物平台等)经常涉及到个人手机号、身份证号等敏感信息，针对这些信息设计对应接口时，通常接口返回值中的敏感数据需要进行脱敏操作，记录三种实现接口数据脱敏方法</p><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><h4 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h4><p>整合MyBatis插件，在查询的时候针对特定的字段进行脱敏</p><ol><li><a href="https://blog.csdn.net/as13762443639/article/details/122294344#:~:text=mybatis-plus%E7%9A%84%E6%95%B0%E6%8D%AE%E8%84%B1%E6%95%8F%E4%BD%BF%E7%94%A8%201%20%EF%BC%881%EF%BC%89%E5%AD%97%E6%AE%B5%E8%84%B1%E6%95%8F%20%E6%B3%A8%E8%A7%A3%20%40FieldSensitive%20%E5%8D%B3%E5%8F%AF%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E8%84%B1%E6%95%8F%EF%BC%8C%E5%86%85%E7%BD%AE%20%E6%89%8B%E6%9C%BA%E5%8F%B7%20%E3%80%81,-%3E%20%7B%20...%205%20%EF%BC%885%EF%BC%89%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%EF%BC%88%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%EF%BC%89%20%E6%B3%A8%E8%A7%A3%20%40Sharding%20">mybatis-plus的数据脱敏使用</a></li><li><a href="https://blog.csdn.net/relosy/article/details/123494036">Mybatis插件+注解实现数据脱敏</a></li></ol><h4 id="Jackson"><a href="#Jackson" class="headerlink" title="Jackson"></a>Jackson</h4><p>在序列化阶段对特定字段进行脱敏</p><ol><li><p>自定义一个Jackson注解<br>一旦属性被标注，则进行对应的脱敏</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.FIELD)</span><br><span class="hljs-meta">@JacksonAnnotationsInside</span><br><span class="hljs-meta">@JsonSerialize(using=SensitiveJsonSerializer.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Sensitive&#123;<br>    <span class="hljs-comment">// 脱敏策略</span><br>    SensitiveStrategy <span class="hljs-title function_">strategy</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>定制脱敏策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">SensitiveStrategy</span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 用户名</span><br><span class="hljs-comment">     */</span><br>    USERNAME(s-&gt;s.replaceAll(<span class="hljs-string">&quot;(\\S)\\S(\\S)&quot;</span>,<span class="hljs-string">&quot;($1*$2)&quot;</span>)),<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 身份证</span><br><span class="hljs-comment">     */</span><br>    ID_CARD(s-&gt;s.replaceAll(<span class="hljs-string">&quot;(\\d&#123;4&#125;\\d&#123;10&#125;(\\w&#123;4&#125;)&quot;</span>,<span class="hljs-string">&quot;$1****$2&quot;</span>)),<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     *手机号</span><br><span class="hljs-comment">     */</span><br>    PHONE(s-&gt;s.replaceAll(<span class="hljs-string">&quot;(\\d&#123;3&#125;)\\d&#123;4&#125;(\\d&#123;4&#125;)&quot;</span>,<span class="hljs-string">&quot;$1****$2&quot;</span>)),<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     *地址</span><br><span class="hljs-comment">     */</span><br>    ADDRESS(s-&gt;s.replaceA1l(<span class="hljs-string">&quot;(\\S&#123;3&#125;)\\S&#123;2&#125;(\\S*)\\S&#123;2&#125;&quot;</span>,<span class="hljs-string">&quot;$1****$2****&quot;</span>));<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Function&lt;String,String&gt; desensitizer;<br><br>    SensitiveStrategy(Function&lt;String,String&gt; desensitizer)&#123;<br>        <span class="hljs-built_in">this</span>.desensitizer = desensitizer;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Function&lt;String,String&gt; desensitizer&#123;<br>        <span class="hljs-keyword">return</span> desensitizer;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>定制JSON序列化实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 序列化注解自定义实现</span><br><span class="hljs-comment"> * JsonSerializer&lt;String&gt;：指定String 类型，serialize()方法用于将修改后的数据载入</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SensitiveJsonSerializer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JsonSerializer</span>&lt;String&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ContextualSerializer</span> &#123;<br>    <span class="hljs-keyword">private</span> SensitiveStrategy strategy;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(String value, JsonGenerator gen, SerializerProvider serializers)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        gen.writeString(strategy.desensitizer().apply(value));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取属性上的注解属性</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> JsonSerializer&lt;?&gt; createContextual(SerializerProvider prov, BeanProperty property) <span class="hljs-keyword">throws</span> JsonMappingException &#123;<br><br>        <span class="hljs-type">Sensitive</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> property.getAnnotation(Sensitive.class);<br>        <span class="hljs-keyword">if</span> (Objects.nonNull(annotation)&amp;&amp;Objects.equals(String.class, property.getType().getRawClass())) &#123;<br>            <span class="hljs-built_in">this</span>.strategy = annotation.strategy();<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> prov.findValueSerializer(property.getType(), property);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>定制需要脱敏对象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *真实姓名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Sensitive(strategy Sensitivestrategy.USERNAME)</span><br>    <span class="hljs-keyword">private</span> string realName;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Sensitive(strategy Sensitivestrategy.ADDRESS)</span><br>    <span class="hljs-keyword">private</span> string address;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *电话号码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Sensitive(strategy Sensitivestrategy.PHONE)</span><br>    <span class="hljs-keyword">private</span> string phoneNumber;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *身份证号码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Sensitive(strategy Sensitivestrategy.ID_CARD)</span><br>    <span class="hljs-keyword">private</span> string idCard;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>接口测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span>&#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/test&quot;)</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        user.setRealName(<span class="hljs-string">&quot;李小明&quot;</span>);<br>        user.setPhoneNumber(<span class="hljs-string">&quot;12345678901&quot;</span>);<br>        user.setAddress(<span class="hljs-string">&quot;北京市&quot;</span>);<br>        user.setIdCard(<span class="hljs-string">&quot;4333333333334334333&quot;</span>);<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h4 id="Sharding-Sphere"><a href="#Sharding-Sphere" class="headerlink" title="Sharding Sphere"></a>Sharding Sphere</h4><p><a href="https://blog.csdn.net/u014553029/article/details/109277618">ShardingSphere-ShardingJdbc 数据脱敏</a></p><p><a href="https://shardingsphere.apache.org/document/legacy/4.x/document/cn/features/orchestration/encrypt/">shardingsphere官方文档</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>目前仅作小记，未来开发涉及到后，做更进一步的分析理解</p>]]></content>
    
    
    <categories>
      
      <category>待归类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多线程异步和MQ的区别</title>
    <link href="/2022/12/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%82%E6%AD%A5%E5%92%8CMQ%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/12/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%82%E6%AD%A5%E5%92%8CMQ%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ol><li>CPU消耗<br> 多线程异步可能存在CPU竞争，而MQ不会消耗本机的CPU</li><li>MQ方式实现异步是完全解耦的，适合于大型互联网项目</li><li>削锋或者消息堆积能力<br> 当业务系统处于靠并发，MQ可以将消息堆积在Broker实例中，而多线程会创建大量线程，但过量的线程可能会触发拒绝策略。</li><li>使用MQ引入了中间件，增加了项目复杂度和运维难度</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>规模较小的项目可以使用多线程异步，大项目建议使用MQ实现异步</p>]]></content>
    
    
    <categories>
      
      <category>待归类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树</title>
    <link href="/2022/11/17/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2022/11/17/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>二叉树的简单操作函数<br>主要包括二叉树初始化 二叉排序树插入  前中后序遍历</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span> &#123;</span><br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span>* <span class="hljs-title">left</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span>* <span class="hljs-title">right</span>;</span><br>&#125;BTNode;<br><br><br><br>BTNode* <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>    BTNode* root = (BTNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BTNode));<br>    root-&gt;data = <span class="hljs-number">5</span>;<br>    root-&gt;left = <span class="hljs-literal">NULL</span>;<br>    root-&gt;right = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br><br><br><span class="hljs-comment">// 按照二叉排序树 插入树</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(BTNode* root, <span class="hljs-type">int</span> value)</span> &#123;<br>    <span class="hljs-keyword">if</span> (value &lt; root-&gt;data) &#123;<br>        <span class="hljs-keyword">if</span> (root-&gt;left == <span class="hljs-literal">NULL</span>) &#123;<br>            BTNode* node;<br>            node = (BTNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BTNode));<br>            node-&gt;data = value;<br>            node-&gt;left = <span class="hljs-literal">NULL</span>;<br>            node-&gt;right = <span class="hljs-literal">NULL</span>;<br>            root-&gt;left = node;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        insert(root-&gt;left, value);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (root-&gt;right == <span class="hljs-literal">NULL</span>) &#123;<br><br>            BTNode* node;<br>            node = (BTNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BTNode));<br>            node-&gt;data = value;<br>            node-&gt;left = <span class="hljs-literal">NULL</span>;<br>            node-&gt;right = <span class="hljs-literal">NULL</span>;<br>            root-&gt;right = node;<br>            <span class="hljs-keyword">return</span>;<br><br>        &#125;<br>        insert(root-&gt;right, value);<br>    &#125;<br>&#125;;<br><br><br><span class="hljs-comment">// 中序打印 </span><br><span class="hljs-type">void</span> <span class="hljs-title function_">midPrint</span><span class="hljs-params">(BTNode* root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">NULL</span>) &#123;<br>        midPrint(root-&gt;left);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, root-&gt;data);<br>        midPrint(root-&gt;right);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// 先序打印 </span><br><span class="hljs-type">void</span> <span class="hljs-title function_">prePrint</span><span class="hljs-params">(BTNode* root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, root-&gt;data);<br>        prePrint(root-&gt;left);<br>        prePrint(root-&gt;right);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 后序打印 </span><br><span class="hljs-type">void</span> <span class="hljs-title function_">postPrint</span><span class="hljs-params">(BTNode* root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">NULL</span>) &#123;<br>        postPrint(root-&gt;left);<br>        postPrint(root-&gt;right);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, root-&gt;data);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;<br>    BTNode* root = init();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,root-&gt;data);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">8</span>; i++)<br>    &#123;<br>         insert(root, i);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;中序遍历\n&quot;</span>);<br>    midPrint(root);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n先序遍历\n&quot;</span>);<br>    prePrint(root);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n后序遍历\n&quot;</span>);<br>    prePrint(root);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/../img/tree/BiTree.jpg" alt="插入和遍历效果图"></p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>以上代码能解决增改查，后续补上关于层次遍历和删除函数</p>]]></content>
    
    
    <categories>
      
      <category>二叉树</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单链表</title>
    <link href="/2022/11/16/%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    <url>/2022/11/16/%E5%8D%95%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p>每次插入一个节点都实时malloc分配空间，再使用next进行链接</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;malloc.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span><br><span class="hljs-type">int</span> data;<br>LNode* next;<br>&#125;LNode,*LinkList;<br><br>LinkList <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>LinkList L;<br>L = (LNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br><span class="hljs-comment">// 这句话其实可以省略，因为编辑器初始就会默认提供NULL，</span><br><span class="hljs-comment">// 但为了有助读者理解 此时刚创造的节点应该没有指向任何节点</span><br>L-&gt;next = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> L;<br>&#125;<br><br><span class="hljs-comment">// 头插法</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">insert1</span><span class="hljs-params">(LinkList L,<span class="hljs-type">int</span> value)</span> &#123;<br>LinkList p = L;<br>LNode* q = (LNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br><span class="hljs-keyword">if</span> (!q) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;分配内存失败&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>q-&gt;next = p-&gt;next;<br>q-&gt;data = value;<br>L-&gt;next = q;<br>&#125;<br><span class="hljs-comment">// 尾插法</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">insert2</span><span class="hljs-params">(LinkList L, <span class="hljs-type">int</span> value)</span> &#123;<br>LinkList p = L;<br><span class="hljs-keyword">while</span> (p-&gt;next != <span class="hljs-literal">NULL</span>)<br>&#123;<br>p = p-&gt;next;<br>&#125;<br><br>LNode* q = (LNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br><span class="hljs-keyword">if</span> (!q) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;分配内存失败&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>q-&gt;data = value;<br>q-&gt;next = <span class="hljs-literal">NULL</span>;<br>p-&gt;next = q;<br>&#125;<br><br><span class="hljs-comment">// 根据需求需要返回int值  </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">del</span><span class="hljs-params">(LinkList L, <span class="hljs-type">int</span> index)</span> &#123;<br><span class="hljs-comment">// 也可以写成 LNode* p = L;  本质一样，只是表示的角度不同 </span><br>LinkList p = L;<br>p = p-&gt;next;<br><span class="hljs-comment">// 定位到前一个位置 到达index-1的逻辑可能不同</span><br><span class="hljs-comment">// 但本质都是定位到待删除节点的前一个位置</span><br><span class="hljs-type">int</span> i =  <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (p!=<span class="hljs-literal">NULL</span> &amp;&amp; i!=index<span class="hljs-number">-1</span>)<br>&#123;<br>p = p-&gt;next;<br>i++;<br>&#125;<br><span class="hljs-keyword">if</span> (!p || i!=index<span class="hljs-number">-1</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;指定索引的节点不存在&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br>LNode* q = p-&gt;next;<br><span class="hljs-type">int</span> value = q-&gt;data;<br>p-&gt;next = q-&gt;next;<br><span class="hljs-built_in">free</span>(q);<br><span class="hljs-keyword">return</span>  value;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">modify</span><span class="hljs-params">(LinkList L, <span class="hljs-type">int</span> index, <span class="hljs-type">int</span> value)</span> &#123;<br><span class="hljs-comment">// 也可以写成 LNode* p = L;  本质一样，只是表示的角度不同 </span><br>LinkList p = L;<br>p = p-&gt;next;<br><span class="hljs-comment">// 定位到index位置 </span><br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span> &amp;&amp; i != index)<br>&#123;<br>p = p-&gt;next;<br>i++;<br>&#125;<br><span class="hljs-keyword">if</span> (!p || i != index) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;指定索引的节点不存在&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br>p-&gt;data = value;<br><br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">select</span><span class="hljs-params">(LinkList L, <span class="hljs-type">int</span> index)</span> &#123;<br><span class="hljs-comment">// 也可以写成 LNode* p = L;  本质一样，只是表示的角度不同 </span><br>LinkList p = L;<br>p = p-&gt;next;<br><span class="hljs-comment">// 定位到index位置 </span><br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span> &amp;&amp; i != index)<br>&#123;<br>p = p-&gt;next;<br>i++;<br>&#125;<br><span class="hljs-keyword">if</span> (!p || i != index) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;指定索引的节点不存在&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-keyword">return</span> p-&gt;data;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(LinkList L)</span> &#123;<br><span class="hljs-comment">// 写成LNode* p = L 也是可以的</span><br>LinkList p = L;<br>p = p-&gt;next;<br><span class="hljs-keyword">while</span> (p!=<span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, p-&gt;data);<br>p = p-&gt;next;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>LinkList L = init();<br>print(L);<br><br><br><span class="hljs-comment">// 需求  头插法  在原链表中插入两个节点 值为 0 ，1   =&gt;  得到结果为 1，0</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++)<br>&#123;<br>insert1(L, i);<br>&#125;<br>print(L);<br><br><span class="hljs-comment">// 需求  尾插法 在原链表中插入三个节点 值为 0，1，2 =》 得到结果为 1，0，0，1，2</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>&#123;<br>insert2(L, i);<br>&#125;<br>print(L);<br><br><br><span class="hljs-comment">// 需求 删除索引2的节点 注意：需要你返回被删除的这个节点值,并打印这个值出来</span><br><br><span class="hljs-type">int</span> del_index = <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> del_value = del(L, del_index);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;被删除的值为：%d\n&quot;</span>, del_value);<br>print(L);<br><br><br><span class="hljs-comment">// 需求 修改第2个节点的节点值为9 </span><br><span class="hljs-type">int</span> modify_index = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> modify_value = <span class="hljs-number">9</span>;<br>modify(L, modify_index, modify_value);<br>print(L);<br><br><br><span class="hljs-comment">// 需求 查询第2个节点的节点值  注意这个地方的需求不是直接给的索引值 需要转换为索引值 </span><br><span class="hljs-type">int</span> select_index = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> select_value = select(L,select_index);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;查询到的第%d个节点的值为：%d\n&quot;</span>,select_index+<span class="hljs-number">1</span>, select_value);<br>print(L);<br><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/../img/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%8D%95%E9%93%BE%E8%A1%A8.jpg" alt="单链表运行结果"></p>]]></content>
    
    
    <categories>
      
      <category>线性表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态顺序表</title>
    <link href="/2022/11/16/%E5%8A%A8%E6%80%81%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    <url>/2022/11/16/%E5%8A%A8%E6%80%81%E9%A1%BA%E5%BA%8F%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="动态顺序表"><a href="#动态顺序表" class="headerlink" title="动态顺序表"></a>动态顺序表</h3><p>动态顺序表属性中采用指针基质方式设计，当原来的数组满了之后，<br>采用realloc函数重新分配一部分内存，<strong>让结构体的基址指针指向新的这部分扩容后的内容</strong>，<br>变相实现了顺序表的动态扩容</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;malloc.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX 100</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> increment_size 10</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DynSqeList</span>&#123;</span><br>    <span class="hljs-type">int</span>* elem;<br>    <span class="hljs-type">int</span> length;<br>    <span class="hljs-type">int</span> max;<br>&#125;DynSqeList;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(DynSqeList&amp; L)</span> &#123;<br>    L.elem = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * <span class="hljs-number">100</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>        L.elem[i] = i;<br>        L.length++;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(DynSqeList&amp; L, <span class="hljs-type">int</span> index, <span class="hljs-type">int</span> value)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index&lt;<span class="hljs-number">0</span> || index &gt;L.length) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入索引值超过边界&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (L.length == L.max) &#123;<br>        <span class="hljs-type">int</span>* NewArrayBase = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">realloc</span>(L.elem, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * (L.length + increment_size));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; L.length; i++)<br>        &#123;<br>            NewArrayBase[i] = L.elem[i];<br>        &#125;<br>        L.elem = NewArrayBase;<br>        L.max = L.length + increment_size;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = L.length<span class="hljs-number">-1</span>; i &gt;= index; i--)<br>    &#123;<br>        L.elem[i + <span class="hljs-number">1</span>] = L.elem[i];<br>    &#125;<br>    L.elem[index] = value;<br>    L.length++;<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">del</span><span class="hljs-params">(DynSqeList&amp; L, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index&lt;<span class="hljs-number">0</span> || index&gt;L.length) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除索引值超过边界&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = index; i &lt; L.length<span class="hljs-number">-1</span>; i++)<br>    &#123;<br>        L.elem[i] = L.elem[i + <span class="hljs-number">1</span>];<br>    &#125;<br>    L.length--;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">modify</span><span class="hljs-params">(DynSqeList&amp; L, <span class="hljs-type">int</span> index, <span class="hljs-type">int</span> value)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index&lt;<span class="hljs-number">0</span> || index&gt;L.length) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;修改索引值超过边界&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    L.elem[index] = value;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">select</span><span class="hljs-params">(DynSqeList&amp; L, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index&lt;<span class="hljs-number">0</span> || index&gt;L.length) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;查询索引值超过边界&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-type">int</span>  select_value = L.elem[index];<br>    <span class="hljs-keyword">return</span> select_value;<br>    <br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(DynSqeList&amp; L)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; L.length<span class="hljs-number">-1</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, L.elem[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    DynSqeList L;<br>    L.length = <span class="hljs-number">0</span>;<br>    init(L);<br>    print(L);<br><br><br>    <span class="hljs-type">int</span> insert_index = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> insert_value = <span class="hljs-number">9</span>;<br>    insert(L, insert_index, insert_value);<br>    print(L);<br><br>    <span class="hljs-type">int</span> del_index = <span class="hljs-number">0</span>;<br>    del(L, del_index);<br>    print(L);<br><br><br>    <span class="hljs-type">int</span> modify_index = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> modify_value = <span class="hljs-number">9</span>;<br>    modify(L, modify_index, modify_value);<br>    print(L);<br><br><br>    <span class="hljs-type">int</span> select_index = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> select_value = select(L, select_index);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, select_value);<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/../img/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E5%8A%A8%E6%80%81%E9%A1%BA%E5%BA%8F%E8%A1%A8.jpg" alt="动态顺序表运行结果"></p>]]></content>
    
    
    <categories>
      
      <category>线性表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>顺序表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>静态顺序表</title>
    <link href="/2022/11/16/%E9%9D%99%E6%80%81%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    <url>/2022/11/16/%E9%9D%99%E6%80%81%E9%A1%BA%E5%BA%8F%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="静态顺序表"><a href="#静态顺序表" class="headerlink" title="静态顺序表"></a>静态顺序表</h3><p>声明的结构体属性中，直接采用数组，因此能实现直接定位，但也正因为是数组，导致不能扩容。只能静态使用</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX 100</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SqeList</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> elem[MAX];<br>    <span class="hljs-type">int</span> length;<br>&#125;SqeList;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(SqeList&amp; L)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>        L.elem[i] = i;<br>        L.length++;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(SqeList&amp; L,<span class="hljs-type">int</span> index,<span class="hljs-type">int</span> value)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;L.length) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入索引位置超出边界&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (L.length == MAX) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;静态数组已满，无法再插入元素&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = L.length<span class="hljs-number">-1</span>; i &gt;= index; i--)<br>    &#123;<br>        L.elem[i + <span class="hljs-number">1</span>] = L.elem[i];<br>     &#125;<br>    L.elem[index] = value;<br>    L.length++;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">del</span><span class="hljs-params">(SqeList&amp; L, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt; L.length - <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除索引位置超出边界&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = index; i &lt; L.length<span class="hljs-number">-1</span>; i++)<br>    &#123;<br>        L.elem[i] = L.elem[i + <span class="hljs-number">1</span>];<br>    &#125;<br>    L.length--;<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">modify</span><span class="hljs-params">(SqeList&amp; L,<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> value)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt; L.length<span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;修改索引位置超出边界&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    L.elem[index] = value;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">select</span><span class="hljs-params">(SqeList&amp; L, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt; L.length - <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;查询索引位置超出边界&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> value = L.elem[index];<br>    <span class="hljs-keyword">return</span> value;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(SqeList&amp; L)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; L.length; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, L.elem[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    SqeList L;<br>    L.length = <span class="hljs-number">0</span>;<br>    init(L);<br>    print(L);<br><br>    <span class="hljs-type">int</span> insert_index = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> insert_value = <span class="hljs-number">9</span>;<br>    insert(L,insert_index,insert_value);<br>    print(L);<br><br>    <span class="hljs-type">int</span> del_index = <span class="hljs-number">1</span>;<br>    del(L, del_index);<br>    print(L);<br><br><br>    <span class="hljs-type">int</span> modify_index = <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> modify_value = <span class="hljs-number">9</span>;<br>    modify(L, modify_index, modify_value);<br>    print(L);<br><br><br>    <span class="hljs-type">int</span> select_index = <span class="hljs-number">9</span>;<br>    <span class="hljs-type">int</span> select_value = select(L, select_index);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,select_value);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><h3 id="运行效果图"><a href="#运行效果图" class="headerlink" title="运行效果图"></a>运行效果图</h3><p><img src="/../img/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E9%9D%99%E6%80%81%E9%A1%BA%E5%BA%8F%E8%A1%A8.jpg" alt="静态顺序表"></p>]]></content>
    
    
    <categories>
      
      <category>线性表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>顺序表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>归并排序</title>
    <link href="/2022/11/08/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/11/08/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><ol><li>核心为分治思想(分解，解决，合并)，以下代码采用递归的思想。时间复杂度任何情况下都是$O(nlogn)$。空间复杂度为$O(n)$在进行子数组合并的时候，需要临时申请一个数组来暂时存放排好序的数据。因为这个临时空间是可以重复利用的，最多需要存放n个数据。</li><li>代码由上向下的思想实现排序</li><li>mergeSort用于实现(int low, int high)之间排序，merge用完具体完成排序任务</li></ol><h3 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> sort.merge;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ShaoYJ</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/10/29 周六</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc</span> 得到升序排序</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MergeSort</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// Integer[] arr = scanNum();</span><br>        Integer[] arr = &#123;<span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;;<br>        System.out.println(<span class="hljs-string">&quot;排序前:&quot;</span> + Arrays.toString(arr));<br>        <span class="hljs-comment">// Integer[] arr = &#123;5,4,3,2,1&#125;;</span><br>        mergeSort(arr, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;排序后:&quot;</span> + Arrays.toString(arr));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer[] scanNum() &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        System.out.print(<span class="hljs-string">&quot;输入一串数字，空格分开，以#结束:&quot;</span>);<br>        <span class="hljs-keyword">while</span> (!sc.hasNext(<span class="hljs-string">&quot;#&quot;</span>)) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            list.add(a);<br>        &#125;<br><span class="hljs-comment">//       list 转 Integer : 提供首地址即可</span><br>        <span class="hljs-keyword">return</span> list.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[<span class="hljs-number">0</span>]);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(Integer[] arr, <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> mid, <span class="hljs-type">int</span> high)</span> &#123;<br>        <span class="hljs-type">int</span>[] tmp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[high - low + <span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> low, k = mid + <span class="hljs-number">1</span>;<br><span class="hljs-comment">//        先将小的值交替从arr前后序列中提取出来，放到tmp中</span><br>        <span class="hljs-keyword">while</span> (j &lt;= mid &amp;&amp; k &lt;= high) &#123;<br>            <span class="hljs-keyword">if</span> (arr[j] &lt; arr[k]) &#123;<br>                tmp[i++] = arr[j++];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                tmp[i++] = arr[k++];<br>            &#125;<br>        &#125;<br><br><span class="hljs-comment">//        处理完剩余的值，放到tmp中</span><br>        <span class="hljs-keyword">while</span> (j &lt;= mid) &#123;<br>            tmp[i++] = arr[j++];<br>        &#125;<br>        <span class="hljs-keyword">while</span> (k &lt;= high) &#123;<br>            tmp[i++] = arr[k++];<br>        &#125;<br><br><span class="hljs-comment">//        将排序好的tmp覆盖赋予arr</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; l &lt; tmp.length; l++) &#123;<br>            arr[low + l] = tmp[l];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mergeSort</span><span class="hljs-params">(Integer[] arr, <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high)</span> &#123;<br><span class="hljs-comment">//      递归调用</span><br>        <span class="hljs-keyword">if</span> (low &lt; high) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (low + high) / <span class="hljs-number">2</span>;<br>            mergeSort(arr, low, mid);<br>            mergeSort(arr, mid + <span class="hljs-number">1</span>, high);<br>            merge(arr, low, mid, high);<br>        &#125;<br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/../img/sort/MergeSort.png" alt="MergeSort"></p><h3 id="学习收获"><a href="#学习收获" class="headerlink" title="学习收获"></a>学习收获</h3><ol><li>典型分治法思维，将问题分解，划分为更小的问题进行处理，再将得到的结果进行合并</li><li>leetcode中有很多相同题型，另外动态规划也还需要学习积累</li></ol>]]></content>
    
    
    <categories>
      
      <category>排序算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分治排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速排序</title>
    <link href="/2022/10/29/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/10/29/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>快速排序是交换排序（冒泡排序也是交换排序）的一种,时间复杂度可达到$(nlog_2n)$。快速排序的最坏运行情况是 O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(nlogn)，且 O(nlogn) 记号中隐含的常数因子很小，比复杂度稳定等于 O(nlogn) 的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。</p><p>思路在于<strong>分治</strong>的策略，该方法的基本思想是：</p><p>1．先从数列中取出一个数作为<strong>基准数</strong>。 找<br>2．分区过程，<strong>将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边</strong>。  分<br>3．再对<strong>左右区间</strong>重复第二步，直到各区间只有一个数。  重复</p><p><img src="/../img/sort/quickSort.gif" alt="快速排序"></p><h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sort.exchange;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ShaoYJ</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/10/27 周四</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc</span> 得到升序结果</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QuickSort</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// Integer[] arr = scanNum();</span><br>        Integer[] arr = &#123;<span class="hljs-number">6</span>, <span class="hljs-number">54</span>, <span class="hljs-number">32</span>, <span class="hljs-number">21</span>, <span class="hljs-number">9</span>, <span class="hljs-number">100</span>&#125;;<br>        <span class="hljs-comment">// Integer[] arr = &#123;5,4,3,2,1&#125;;</span><br>        System.out.println(<span class="hljs-string">&quot;排序前:&quot;</span> + Arrays.toString(arr));<br>        System.out.println(<span class="hljs-string">&quot;排序后:&quot;</span> + Arrays.toString(quickSort(arr, <span class="hljs-number">0</span>, arr.length-<span class="hljs-number">1</span>)));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer[] quickSort(Integer[] arr, <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high) &#123;<br>        <span class="hljs-keyword">if</span> (low &gt; high) &#123;<br>            <span class="hljs-keyword">return</span> arr;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> low;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> high;<br>        Integer t;<br>        <span class="hljs-comment">//  基址对应元素值</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[low];<br>        <span class="hljs-comment">//  来回进行交换</span><br>        <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br><span class="hljs-comment">//            先从后向前遍历找到符合条件的值</span><br>            <span class="hljs-keyword">while</span> (temp &lt;= arr[j] &amp;&amp; i &lt; j) &#123;<br>                j--;<br>            &#125;<br><span class="hljs-comment">//           从前往后遍历找到符合条件的值</span><br>            <span class="hljs-keyword">while</span> (temp &gt;= arr[i] &amp;&amp; i &lt; j) &#123;<br>                i++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (i &lt; j) &#123;<br>                t = arr[i];<br>                arr[i] = arr[j];<br>                arr[j] = t;<br>            &#125;<br>        &#125;<br><br>        arr[low] = arr[i];<br>        arr[i] = temp;<br>        quickSort(arr,low,j-<span class="hljs-number">1</span>);<br>        quickSort(arr,j+<span class="hljs-number">1</span>,high);<br><br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer[] scanNum() &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        System.out.print(<span class="hljs-string">&quot;输入一串数字，空格分开，以#结束:&quot;</span>);<br>        <span class="hljs-keyword">while</span> (!sc.hasNext(<span class="hljs-string">&quot;#&quot;</span>)) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            list.add(a);<br>        &#125;<br><span class="hljs-comment">//       list 转 Integer : 提供首地址即可</span><br>        <span class="hljs-keyword">return</span> list.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[<span class="hljs-number">0</span>]);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="/../img/sort/QuickSort.png" alt="运行结果"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>核心思想 <strong>分治</strong>, 以基准为中心，两头交换，左侧的统一大于（或小于）基准，右侧相反同理。</p>]]></content>
    
    
    <categories>
      
      <category>排序算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>交换排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单选择排序</title>
    <link href="/2022/10/26/%E7%AE%80%E5%8D%95%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/10/26/%E7%AE%80%E5%8D%95%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>选择排序是一种经典的排序算法，排序的步骤为</p><ol><li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</li><li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li><li>重复第二步，直到所有元素均排序完毕。</li></ol><p><img src="/../img/sort/selectionSort.gif" alt="实例图片（引自菜鸟教程）"></p><h3 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> sort.select;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ShaoYJ</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/10/26 周三</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc</span> 得到升序结果</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SelectSort</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        Integer[] arr = scanNum();</span><br>        Integer[] arr = &#123;<span class="hljs-number">8</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>&#125;;<br>        sort(arr);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">void</span>  <span class="hljs-title function_">sort</span><span class="hljs-params">(Integer[] arr)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> arr.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> i;<br><span class="hljs-comment">//            让min始终跟踪绑定最小值的索引</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i+<span class="hljs-number">1</span>; j &lt; len; j++) &#123;<br>                <span class="hljs-keyword">if</span>(arr[min]&gt;arr[j]) &#123;<br>                    min = j;<br>                &#125;<br>            &#125;<br><span class="hljs-comment">//            交换当前位和最小位置上的值</span><br>            <span class="hljs-keyword">if</span>(min!=i) &#123;<br>                <span class="hljs-type">Integer</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> arr[i];<br>                arr[i] = arr[min];<br>                arr[min] = tmp;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (Integer i:arr ) &#123;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer[] scanNum() &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        System.out.print(<span class="hljs-string">&quot;输入一串数字，空格分开，以#结束:&quot;</span>);<br>        <span class="hljs-keyword">while</span> (!sc.hasNext(<span class="hljs-string">&quot;#&quot;</span>)) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            list.add(a);<br>        &#125;<br><span class="hljs-comment">//       list 转 Integer : 提供首地址即可</span><br>        <span class="hljs-keyword">return</span> list.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><img src="/../img/sort/SelectSort.png" alt="选择排序结果"></p>]]></content>
    
    
    <categories>
      
      <category>排序算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>选择排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>希尔排序</title>
    <link href="/2022/10/17/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/10/17/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>希尔排序是一种<strong>递减增量</strong>排序算法，是时间第一个突破$O(n^2)$的排序算法，核心思想在于<strong>增量缩减</strong><br>例如将6 5 4 3 2 1排序得到升序结果<br>第一轮<br>计算增量 gap &#x3D; arr.length&#x2F;2 &#x3D; 6&#x2F;2 &#x3D; 3<br>按照 0+n*gap 的格式找到最后一个小于数据长度的元素<br>所以索引（0，0+3）（1，1+3）（2，2+3）比较，交换6和3位置，交换5和2位置，交换 4和1位置<br>得到 3 2 1 6 5 4</p><p>第二轮<br>计算增量 （3+1）&#x2F;2  向上取整<br>（0，0+2，0+2+2）  （1，1+2，1+2+2） 比较，交换3和1位置，交换4和6位置<br>得到 1 2 3 4 5 6  完成排序 </p><p><a href="http://tools.jb51.net/aideddesign/paixu_ys">点此链接，可以查看在线效果图</a></p><h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sort.insert;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ShaoYJ</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/10/17 周一</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc</span> 得到升序结果</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShellSort</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        Integer[] arr = scanNum();</span><br>        Integer[] arr = &#123;<span class="hljs-number">6</span>,<span class="hljs-number">54</span>,<span class="hljs-number">32</span>,<span class="hljs-number">21</span>,<span class="hljs-number">9</span>,<span class="hljs-number">100</span>&#125;;<br><span class="hljs-comment">//        Integer[] arr = &#123;5,4,3,2,1&#125;;</span><br><br><br>        System.out.println(<span class="hljs-string">&quot;排序前:&quot;</span> + Arrays.toString(arr));<br>        sort(arr);<br>        System.out.print(<span class="hljs-string">&quot;排序后:&quot;</span> + Arrays.toString(arr));<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(Integer[] arr)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> arr.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">gap</span> <span class="hljs-operator">=</span> (len + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">while</span> (gap &gt;=<span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">//            i 表示第一个gap前的数字</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; gap; i++) &#123;<br><span class="hljs-comment">//               循环每次的增量都是当前的gap数值</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + gap; j &lt; len; j += gap) &#123;<br><span class="hljs-comment">//                       本组内部  从后往前采用 插入排序，实现数据的升序排列</span><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> j - gap; k &gt;= i; k -= gap) &#123;<br>                        <span class="hljs-keyword">if</span> (arr[j] &lt; arr[k]) &#123;<br><span class="hljs-comment">//                          当前点的值小于前面点的值 向后移</span><br>                            <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> arr[j];<br>                            arr[j] = arr[k];<br>                            arr[k] = tmp;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//   此处gap+1 是为了保证当gap为奇数的时候，实现向上取整</span><br>            gap = (gap+<span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br><span class="hljs-comment">//          此处由于设计的是 gap = (gap+1)/2 所以 gap会在等于1的时候不能正确退出，因此设置一个标志量，用于限制gap=1只能在while中走一次</span><br>            <span class="hljs-keyword">if</span>(!flag)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(gap==<span class="hljs-number">1</span>)&#123;<br>                flag = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br><span class="hljs-comment">//        增量从length/2开始，然后增量依次缩小为一半</span><br><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer[] scanNum() &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        System.out.print(<span class="hljs-string">&quot;输入一串数字，空格分开，以#结束:&quot;</span>);<br>        <span class="hljs-keyword">while</span> (!sc.hasNext(<span class="hljs-string">&quot;#&quot;</span>)) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            list.add(a);<br>        &#125;<br><span class="hljs-comment">//       list 转 Integer : 提供首地址即可</span><br>        <span class="hljs-keyword">return</span> list.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[<span class="hljs-number">0</span>]);<br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行结果：<br><img src="/../img/sort/ShellSort.png" alt="希尔排序"></p>]]></content>
    
    
    <categories>
      
      <category>排序算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>插入排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>直接插入排序</title>
    <link href="/2022/10/07/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/10/07/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>直接插入排序顾名思义就是不停的将元素插入到一个有序的元素中。<br>可以把整体的元素，划分为有序序列和无序序列</p><ul><li>取出无序序列的一个元素</li><li>在有序中找到合适的位置</li><li>将此元素放到有序元素中<br>重复上方过程，直到没有无序的元素</li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>举例有一组数据 6 5 4 3 2 1，利用直接插入排序算法，排序为升序。<br>有序的元素 【6】（有序序列只有一个元素时必定有序，所以初始就用第一个元素作为有序序列），无序序列【5，4，3，2，1】，</p><p>第一轮：<br>    选出无序序列第一个元素5<br>    从有序序列第一个元素（也可以最后一个元素）开始寻找合适的位置，因为5&lt;6,所以索引0是合适的位置<br>    将6后移，5放入位置0，得到有序序列【5，6】，无序序列【4，3，2，1】</p><p>第二轮：<br>    选出无序序列第一个元素4<br>    从有序序列第一个元素（也可以最后一个元素）开始寻找合适的位置，因为4&lt;5,所以索引0是合适的位置<br>    将5,6后移，4放入位置0，得到有序序列【4，5，6】，无序序列【3，2，1】</p><p>第三轮：<br>    选出无序序列第一个元素3<br>    从有序序列第一个元素（也可以最后一个元素）开始寻找合适的位置，因为3&lt;4,所以索引0是合适的位置<br>    将4，5，6后移，3放入位置0，得到有序序列【4，5，6】，无序序列【2，1】</p><p>第四轮：<br>    选出无序序列第一个元素2<br>    从有序序列第一个元素（也可以最后一个元素）开始寻找合适的位置，因为3&lt;4,所以索引0是合适的位置<br>    将3，4，5，6后移，2放入位置0，得到有序序列【2，3，4，5，6】，无序序列【1】</p><p>第五轮：<br>    选出无序序列第一个元素1<br>    从有序序列第一个元素（也可以最后一个元素）开始寻找合适的位置，因为3&lt;4,所以索引0是合适的位置<br>    将2，3，4，5，6后移，1放入位置0，得到有序序列【1，2，3，4，5，6】，无序序列【】</p><p><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">点此链接，可以查看在线效果图</a></p><p><img src="/../img/sort/InsertSort.png" alt="直接插入排序"></p><h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> sort.insert;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ShaoYJ</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/10/7 周五</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc</span>  得到升序的排序结果</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InsertSort</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>          Integer[] arr = scanNum();<br><span class="hljs-comment">//        Integer[] arr = &#123;3,2,1&#125;;</span><br><br><br>        System.out.println(<span class="hljs-string">&quot;排序前:&quot;</span> + Arrays.toString(arr));<br>        sort(arr);<br>        System.out.print(<span class="hljs-string">&quot;排序后:&quot;</span> + Arrays.toString(arr));<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer[] scanNum()&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        System.out.print(<span class="hljs-string">&quot;输入一串数字，空格分开，以#结束:&quot;</span>);<br>        <span class="hljs-keyword">while</span> (!sc.hasNext(<span class="hljs-string">&quot;#&quot;</span>)) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            list.add(a);<br>        &#125;<br><span class="hljs-comment">//       list 转 Integer : 提供首地址即可</span><br>        Integer[] arr = list.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(Integer[] arr)</span>&#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>                <span class="hljs-comment">//  将j到i-1的都后移一个位置</span><br>                <span class="hljs-keyword">if</span>(arr[i] &lt; arr[j])&#123;<br>                    <span class="hljs-type">Integer</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>                    moveArr(arr,j,i);<br>                    arr[j] = temp;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">moveArr</span><span class="hljs-params">(Integer[] arr, <span class="hljs-type">int</span> pre,<span class="hljs-type">int</span> post)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> post-<span class="hljs-number">1</span>; j &gt;=pre; j--) &#123;<br>            arr[j+<span class="hljs-number">1</span>] = arr[j];<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>排序算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>插入排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>堆排序</title>
    <link href="/2022/10/07/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/10/07/%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>堆排序是选择排序的一种，堆通常是一个可以被看做一棵<strong>完全二叉树</strong>的数组对象。<br>堆是一种不稳定的内部排序算法，时间复杂度无论最好，最差，平均都是$log(n)$,此处n表示待排序元素个数。</p><ul><li>大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列；</li><li>小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列；</li></ul><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>不稳定排序：数组中相同的元素，在经过排序，前后顺序会发生变化，即不稳定。细节可参照数据结构严蔚敏版。<br>内部排序：只在内存中进行的排序，不会有数据和磁盘进行交换。</p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>以下假设构造大根堆，则堆必须满足以下要求：</p><ul><li>堆是一个完全二叉树，<strong>这样才能保证根节点i能直接2*i的方式映射到孩子节点</strong></li><li>根节点必须大于左右孩子节点</li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>提供一组数据，这组数据为堆对应完全二叉树的层次遍历结果，使用堆排序完成升序排序（构造大根堆）</p><ol><li>构建大根堆</li><li>交换堆顶和堆最后一个元素（把此轮最大值放到数组后方，后续只对剩下的无序堆排序，每次排序少一个需要排序的元素）</li><li>调整剩下的无序堆为有序大根堆：从最后一个<strong>非叶子节点，从下往上，从左往右</strong>（利用性质一），之后2，3不交替进行，直至需要带排序元素个数为0.</li></ol><p><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">点此链接，可以查看在线效果图</a></p><p><img src="/../img/sort/HeapSort.png" alt="堆排序"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>Java版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> sort.exchange;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ShaoYJ</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/10/7 周五</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc</span> 选择排序的一种，主要分为三步，</span><br><span class="hljs-comment"> * 1. 构建一个堆</span><br><span class="hljs-comment"> * 2. 将堆顶元素与末尾元素交换</span><br><span class="hljs-comment"> * 3. 重新调整结构，2和3交替执行</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HeapSort</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//       输入测试参数</span><br><span class="hljs-comment">//        Scanner sc = new Scanner(System.in);</span><br><span class="hljs-comment">//        ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span><br><span class="hljs-comment">//        System.out.print(&quot;输入一串数字，空格分开，以#结束:&quot;);</span><br><span class="hljs-comment">//        while (!sc.hasNext(&quot;#&quot;)) &#123;</span><br><span class="hljs-comment">//            int a = sc.nextInt();</span><br><span class="hljs-comment">//            list.add(a);</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//        Integer[] arr = new Integer[list.size()];</span><br><span class="hljs-comment">//        list.toArray(arr);</span><br><br><span class="hljs-comment">//        Integer[] arr = &#123;6, 5, 4, 3, 2, 1&#125;;</span><br>        Integer[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;;<br>        System.out.println(<span class="hljs-string">&quot;排序前：&quot;</span> + Arrays.toString(arr));<br>        sort(arr);<br>        System.out.println(<span class="hljs-string">&quot;排序前：&quot;</span> + Arrays.toString(arr));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(Integer[] arr)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 第一步 ：构建大顶堆</span><br><span class="hljs-comment">         *  1. 堆可以看为完全二叉树，</span><br><span class="hljs-comment">         *  2. 从最后一个非叶子节点开始从下往上， 从右向左构建</span><br><span class="hljs-comment">         *  3. 因此 索引i的初始值为最后一个非叶子节点的索引</span><br><span class="hljs-comment">         *  4. 从arr的后面往前移动一个一个大调整堆</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> arr.length / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-comment">//从第一个非叶子结点从下至上，从右至左调整结构</span><br>            adjustHeap(arr, i, arr.length);<br>        &#125;<br><br>        <span class="hljs-comment">//2,3步 =&gt; 调整堆结构+交换堆顶元素与末尾元素</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> arr.length - <span class="hljs-number">1</span>; j &gt; <span class="hljs-number">0</span>; j--) &#123;<br>            <span class="hljs-comment">//第二步 ： 将堆顶元素与末尾元素进行交换</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br>            arr[<span class="hljs-number">0</span>] = arr[j];<br>            arr[j] = temp;<br>            <span class="hljs-comment">// 第三步 ：只需要对剩余的元素重新进行调整</span><br>            adjustHeap(arr, <span class="hljs-number">0</span>, j-<span class="hljs-number">1</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> i</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> length</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">adjustHeap</span><span class="hljs-params">(Integer[] arr, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> length)</span> &#123;<br><span class="hljs-comment">//        把根节点的值保存下来。</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 从i结点的左子结点开始，也就是2i+1处开始,</span><br><span class="hljs-comment">         * 存在一层调整后，下一层不满足的情况，需要把整棵子树都调整</span><br><span class="hljs-comment">         * 例如 子树为 1 5 3 2 -》 1和 5交换之后，5 1 3 2 ，还要继续 交换2*i+1 【数值1】和 2*(2*i+1)+1 【数值2】</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>; j &lt; length; j = j * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 如果存在右孩子节点， 指针需要指向大的子节点</span><br>            <span class="hljs-keyword">if</span>(j+<span class="hljs-number">1</span>&lt;length)&#123;<br>                j = arr[j] &gt; arr[j + <span class="hljs-number">1</span>] ? j : j + <span class="hljs-number">1</span>;<br>            &#125;<br><span class="hljs-comment">//           如果子节点的值大于根节点，交换值</span><br>            <span class="hljs-keyword">if</span> (arr[j] &gt; temp) &#123;<br><span class="hljs-comment">//                父节点的值修改为子节点值</span><br>                arr[i] = arr[j];<br><span class="hljs-comment">//                子节点值设置为原本父节点的值</span><br>                arr[j] = temp;<br><span class="hljs-comment">//                及时同步原本父节点的指针为子节点指针，并开始下一轮调整</span><br>                i = j;<br>            &#125;<br><span class="hljs-comment">//           根节点&gt;大的那个子节点  即 根节点大于所有节点</span><br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="学习收获"><a href="#学习收获" class="headerlink" title="学习收获"></a>学习收获</h3><ul><li>堆排序不稳定。</li><li>堆排序可以视作完全二叉树。</li><li>注意Java代码难点部分，<code>for (int j = i * 2 + 1; j &lt; length; j = j * 2 + 1)</code> 可以先画图理解后，对应索引变化编写代码。</li></ul>]]></content>
    
    
    <categories>
      
      <category>排序算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>选择排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>冒泡排序</title>
    <link href="/2022/10/06/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/10/06/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>冒泡排序是一种交换排序，核心为挨着的两个元素互相进行交换<br>例如将1 2 7 5 4 6排序得到升序结果<br>第一轮 </p><ul><li>1和2是升序，不交换</li><li>2和7是升序，不交换</li><li>7和5是降序，交换，得到 1 2 5 7 4 6</li><li>7和4是降序，交换，得到 1 2 5 4 7 6</li><li>7和6是降序，交换，得到 1 2 5 4 6 7<br>得到第一轮冒泡结果 1 2 5 4 6 7<br>第二轮</li><li>1和2是升序，不交换</li><li>2和5是升序，不交换</li><li>5和4是降序，交换，得到 1 2 4 5 6 7</li><li>5和6是升序，不交换<br>得到第二轮冒泡结果： 1 2 4 5 6 7</li></ul><p>第三轮</p><ul><li>1和2是升序，不交换</li><li>2和4是升序，不交换</li><li>4和5是升序，不交换<br>得到第三轮冒泡结果： 1 2 4 5 6 7</li></ul><p>第四轮</p><ul><li>1和2是升序，不交换</li><li>2和4是升序，不交换<br>得到第四轮冒泡结果： 1 2 4 5 6 7</li></ul><p>第五轮</p><ul><li>1和2是升序，不交换<br>得到第五轮冒泡结果： 1 2 4 5 6 7</li></ul><p>最终结果即为：1 2 4 5 6 7</p><p><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">点此链接，可以查看在线效果图</a></p><p><img src="/../img/sort/BubbleSort.png" alt="堆排序"></p><h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.sort;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ShaoYJ</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/10/6 周四</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc</span> 核心思想两两交换, 升序排列</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BubbleAlgorithm</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        System.out.print(<span class="hljs-string">&quot;输入一串数字，空格分开，以#结束:&quot;</span>);<br>        <span class="hljs-keyword">while</span> (!sc.hasNext(<span class="hljs-string">&quot;#&quot;</span>)) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            list.add(a);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; list.size(); i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; list.size() - i; j++) &#123;<br>                <span class="hljs-keyword">if</span> (list.get(j + <span class="hljs-number">1</span>) &lt; list.get(j)) &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> list.get(j);<br>                    list.set(j, list.get(j + <span class="hljs-number">1</span>));<br>                    list.set(j + <span class="hljs-number">1</span>, tmp);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (Integer i : list) &#123;<br>            System.out.println(i);<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><a href="https://github.com/OoWaterMelonS/IntroToAlgorithms">GitHub个人学习笔试，欢迎指正</a>,后续持续补充中~~</p>]]></content>
    
    
    <categories>
      
      <category>排序算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>交换排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java代码块运行顺序</title>
    <link href="/2022/10/06/Java%E4%BB%A3%E7%A0%81%E5%9D%97%E8%BF%90%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    <url>/2022/10/06/Java%E4%BB%A3%E7%A0%81%E5%9D%97%E8%BF%90%E8%A1%8C%E9%A1%BA%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="Java代码运行顺序"><a href="#Java代码运行顺序" class="headerlink" title="Java代码运行顺序"></a>Java代码运行顺序</h3><p>类内容（静态变量、静态初始化块） &gt; 实例内容（变量、初始化块、构造器）<br>{static变量、static{}} &gt; {初始变量、初始化块{} &gt; ClassName{}&gt; NormalFunction(){}}</p><p>static{}:从属于类的方法，在有类的，还没有类对象的时候即存在了<br>初始化代码块{}: 初始化类对象优先运行代码块，再运行构造方法<br>ClassName(){}: 对象构造方法，初始化对象运行<br>NormalFunction(){}: 最后运行</p><p>static变量和static{}按照顺序决定代码前后顺序输出结果<br>普通变量 初始化代码块{} 构造方法：</p><ul><li>普通变量 初始化代码块{} 按照顺序决定代码前后顺序输出结果</li><li>有构造方法的话，因为构造方法是最后运行的，所以按照构造方法的结果输出</li></ul><h3 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> source.file.TestStatic;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <br><br>    Test()&#123;<br>        System.out.println(<span class="hljs-string">&quot;construct code block&quot;</span>);<br>        <span class="hljs-comment">// j = 3;</span><br>    &#125;<br>    <br>    <span class="hljs-comment">// 输出结果为j = 1</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     System.out.println(&quot;unflagged code block&quot;);</span><br>    <span class="hljs-comment">//     j = 3;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// int j = 1;</span><br><br>    <span class="hljs-comment">// 输出结果为 j= 2</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;unflagged code block&quot;</span>);<br>        j = <span class="hljs-number">2</span>;<br>    &#125;<br>    <br><br><br>    <span class="hljs-comment">// 输出结果为i = 20</span><br>    <span class="hljs-comment">// static&#123;</span><br>    <span class="hljs-comment">//     System.out.println(&quot;static code block&quot;);</span><br>    <span class="hljs-comment">//     i = 30;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// static int i = 20;</span><br><br><br>    <span class="hljs-comment">// 输出结果为i = 30</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">static</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;static code block&quot;</span>);<br>        i = <span class="hljs-number">30</span>;<br>    &#125;<br>    <br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">codeBlock</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;normal function code block&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Test</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>        t.codeBlock();<br><br>        <span class="hljs-type">Test</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>        t2.codeBlock();<br>        System.out.println(Test.i);<br>        System.out.println(t2.j);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">static code block<br>unflagged code block<br>construct code block<br>normal <span class="hljs-keyword">function</span> code block<br>unflagged code blockconstruct code block<br>normal <span class="hljs-keyword">function</span> code block<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java&amp;Python笔试输入模板</title>
    <link href="/2022/10/05/Java&amp;Python%E8%BE%93%E5%85%A5%E6%A8%A1%E6%9D%BF/"/>
    <url>/2022/10/05/Java&amp;Python%E8%BE%93%E5%85%A5%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>记录笔试常见的Java笔试的输入代码模板</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaSystemIn</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 实例一：基于Scanner</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(sc1.nextInt());<br>        System.out.println(sc1.nextDouble());<br>        System.out.println(sc1.nextFloat());<br>        <span class="hljs-comment">// 读取下一行</span><br>        System.out.println(sc1.nextLine());<br>        sc1.close();<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 实例二：</span><br><span class="hljs-comment">         * 利用new BufferedInputStream加快速度</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(System.in));<br>        System.out.println(sc2.nextInt());<br>        System.out.println(sc2.nextDouble());<br>        System.out.println(sc2.nextFloat());<br>        <span class="hljs-comment">// 读取下一行</span><br>        System.out.println(sc2.nextLine());<br>        <br>        sc2.close();<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 示例三：</span><br><span class="hljs-comment">         * 利用字符输入流</span><br><span class="hljs-comment">         * PS 需要抛出异常</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br>        System.out.println(br.readLine());<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> Integer.parseInt(br.readLine());<br>        System.out.println(a);<br>        <br>        <span class="hljs-type">float</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> Float.parseFloat(br.readLine());<br>        System.out.println(b);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>记录笔试常见的Python笔试的输入代码模板</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">return</span> data<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    实例一：</span><br><span class="hljs-string">    题目需要单行输入一串数字  例如接受 1 2 3</span><br><span class="hljs-string">    input()将查询用户的输入，并读取一行用户输入</span><br><span class="hljs-string">    .split()会将输入拆分为“单词”列表</span><br><span class="hljs-string">    map(int, ...)会在每个单词上调用int ，它会懒惰地调用int （尽管这在这里并不重要）； </span><br><span class="hljs-string">    a, b, c = ...将把表达式分解成两个元素，并将第一个分配给a ，第二个分配给b, 第三个分配给c</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    a,b,c = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    <br>    <br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    实例二：</span><br><span class="hljs-string">    直接将单行输入的数字一次转换后放入链表</span><br><span class="hljs-string">    input()将查询用户的输入，并读取一行用户输入</span><br><span class="hljs-string">    .split()会将输入拆分为“单词”列表</span><br><span class="hljs-string">    int(i) for i in list 将单词链表转换为整型链表</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    lists1 = [<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">input</span>().split()]<br>    <br>    <br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    实例三：</span><br><span class="hljs-string">    题目需要单行输入一串数字  例如接受 1 2 3</span><br><span class="hljs-string">    input()将查询用户的输入，并读取一行用户输入</span><br><span class="hljs-string">    .split()会将输入拆分为“单词”列表</span><br><span class="hljs-string">    map(int, ...)会在每个单词上调用int ，它会懒惰地调用int （尽管这在这里并不重要）； </span><br><span class="hljs-string">    list(..)部分强制转换map对象结果为list</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    lists2 = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br><br>    <span class="hljs-built_in">print</span>(solution(lists2))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>改进型Clock置换算法</title>
    <link href="/2022/10/03/%E6%94%B9%E8%BF%9B%E5%9E%8BClock%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95/"/>
    <url>/2022/10/03/%E6%94%B9%E8%BF%9B%E5%9E%8BClock%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h3><p>假如分页存储系统页大小为4KB,字节编址，系统给进程P分配两个固定页框，并采用改进型Clock置换算法，进程P的页表的部分内容如下：</p><table><thead><tr><th>页号</th><th>页框号</th><th>存在位（1：存在 0：不存在）</th><th>访问位（1：访问 0：为访问）</th><th>修改位 （1：修改，0：未修改）</th></tr></thead><tbody><tr><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td></tr><tr><td>2</td><td>20H</td><td>0</td><td>0</td><td>0</td></tr><tr><td>3</td><td>60H</td><td>1</td><td>1</td><td>0</td></tr><tr><td>4</td><td>80H</td><td>1</td><td>1</td><td>1</td></tr></tbody></table><p>若P访问虚拟地址为02A01H的存储单位，则经地址变换为得到的物理地址是( C )。<br>A. 00A01H  B. 20A01H  C. 60A01H  D. 80A01H</p><h3 id="涉及知识"><a href="#涉及知识" class="headerlink" title="涉及知识"></a>涉及知识</h3><p>进制转换<br>内存管理的地址转换<br>页面置换算法</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p><strong>虚拟地址（逻辑地址）</strong><br>虚拟地址02A01H &#x3D; 页号+页内偏移量（和内存页大小统一）。<br>页面大小为4KB&#x3D;$2^{12}$B，对应虚拟地址为02A01H。<br>因为页面大小和业内偏移量相同大小,所以02H为页号。</p><p><img src="/../img/OS/Clock%20replacement%20algorithm/%E6%94%B9%E8%BF%9B%E5%9E%8BCLock%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95.drawio.png" alt="映射关系举例"></p><p>结合背景中的图标可知，02H对应的页框（内存中的一格）号为20H。</p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>因为题干给出要求，内存中固定分配给进程两个页框，同时页号00H，01H已经暂用内存两个页框，所以需要执行页从内存的换入换出。</p><p><strong>页面置换算法（6种）</strong><br><a href="https://www.cnblogs.com/wingsless/p/12295246.html">参照链接一</a></p><ul><li>最佳（Optimal,OPT）置换算法</li><li>先进先出(FIFO)页面置换算法</li><li>最近最久未使用（LRU）置换算法</li><li>随机置换</li><li>时钟置换算法 </li><li>改进时钟置换算法</li></ul><p><strong>时钟置换算法</strong><br><a href="https://www.cnblogs.com/hzxscyq/p/5373760.html">参考链接二</a><br>存在位(resident bit): 对于一个页面是否有物理页与其对应，如果有就为1。<br>修改位(dirty bit)：判断页面 是否被修改过。<br>引用位(clock&#x2F;reference bit)：页面是否有过对它的引用。</p><ol><li>由于20H存在位是0，60H和80H两个页框连续且存在,所以符合题目要求</li><li>根据改进时钟置换算法 60H(1,0)的优先级 &gt; 80H(1,1),所以虚拟地址02A01H转为位实际内存物理地址位60A01H。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>H&#x3D;&gt;16进制   B&#x3D;&gt;2进制   D&#x3D;&gt;10进制  O&#x3D;&gt;8进制</li><li>逻辑地址和物理地址的地址转换 ，基于页表作为中间映射。</li><li>基本分页存储管理的页面置换算法。</li><li>时钟置换算法的处理流程。</li></ol>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分页存储置换算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github使用总结</title>
    <link href="/2022/10/03/github%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <url>/2022/10/03/github%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h3 id="github工作流笔记"><a href="#github工作流笔记" class="headerlink" title="github工作流笔记"></a>github工作流笔记</h3><p>步骤繁杂，却也是做开源必须遵循的原则，避免污染代码。<br>主要供自己学习，查询。</p><p>注意三个代码的三个过程</p><ul><li>remote: 远程github仓库的代码</li><li>Local: 本地仓库中的代码</li><li>Disk: 本地磁盘，真正被程序员修改的代码</li></ul><h4 id="操作步骤（开源贡献或公司项目）"><a href="#操作步骤（开源贡献或公司项目）" class="headerlink" title="操作步骤（开源贡献或公司项目）"></a>操作步骤（开源贡献或公司项目）</h4><p>第一步：从remote server下载源码到Local，第一次clone后，remote ,Disk内容和Locald都是相同版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/example/xxxxx.git<br></code></pre></td></tr></table></figure><p>第二步：避免污染源代码，基于Local复制一份branch为 my-feature。此时Local会有两个版本main(master branch)和my-feature。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout  -b my-feature<br></code></pre></td></tr></table></figure><p>第三步：切换为my-feature,编辑器编辑此branch的源码。查看Disk上的代码的修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git diff<br></code></pre></td></tr></table></figure><p>第四步：将Disk修改了的内容，告知Local git。这些内容会被放到一个暂缓区，尚未修改Local git的my-feature分支的源码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add &lt;changed_file&gt;<br></code></pre></td></tr></table></figure><p>第五步：确定代码没问题后或多次add提交后，将暂存区中的源提交到Local git。此时Local git中的my-feature branch的源码是最新修改过的版本。main branch没变化。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;new xxxx change&quot;</span><br></code></pre></td></tr></table></figure><p>第六步：将Local git的my-feature push到远程服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin my-feature<br></code></pre></td></tr></table></figure><p>第七步：可能github上有其他贡献者,整合了新的更改在github的main中（即此时Local的main和github的main也可能不同）。<br>为了解决这个问题，将disk切换为main，再把Local和Disk都同步为最新的main</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout main<br>git pull origin master<br></code></pre></td></tr></table></figure><p>第八步：Disk切换为my-feature,在my-feature分支下,将Local中的新的main和my-feature合并。采用rebase（优先接受main中的改变，再接受my-feature中的修改）<br>rebase 可能出现rebase conflict,需要手动修改my-feature,再add commit来适配。<br>也可以采用merge，但针对开源代码，优先考量他人的代码是正确的（毕竟有人专门审核）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git rebase main<br></code></pre></td></tr></table></figure><p>第九步: Local中上一步得到的结果，相当于在最新的github的main的基础上做了修改，将本地的branch(强行单人开发的可以-f，多人协作避免使用)push到github。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push -f origin my-feature<br></code></pre></td></tr></table></figure><p>第十步: 告诉项目主人，将my-feature的分支整合到github中的main中去,这可以是在github的网页操作了，不用在本地命令行执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">New pull request<br></code></pre></td></tr></table></figure><p>第十一步： 项目主人，审查代码后，整合你的my-feature代码到main中<br>Squash and merge(将这个分支上的所有改变，合并成一个改变)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Squash and merge <br></code></pre></td></tr></table></figure><p>第十二步：github网页端删除my-feature，Local切换到main,删除my-feature,之后同步下来最新的到main中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -D my-feature<br>git pull origin master<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>如此繁琐操作的核心，在于更改尽量在my-feature中，同时需要考虑同步时候，和最新的main的conflict.</li><li>后续在工作中一步一步的实践，理解，向着开源学习。</li></ol>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java并发编程笔记一</title>
    <link href="/2022/10/01/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <url>/2022/10/01/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<p>Java个人学习笔记</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>甲方项目提出前端页面增加一个功能，需要将数据库的100万（百万两级）条数据，在限定8秒之内（用户体验）导出到指定数量的Excel表.<br>采用方案一：C++或者golang或者C等等，但是后端技术栈是SpringClound微服务，这样胶水式操作不易维护。<br>采用方案二：Java操作，采用单线程一行一行的读取后写入Excel，那大概率会超时。<br>采用方案三：使用Java多线程。</p><p>分析项目需求 Java多线程不仅是实际项目需要的，还是面试笔试重点。</p><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p><a href="https://blog.51cto.com/u_15773567/5722534#:~:text=%E7%BA%BF%E7%A8%8B%E6%98%AF%20%E2%80%8B%20%E2%80%8B%20CPU%20%E2%80%8B%20%E2%80%8B%20%E2%80%8B%20%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8D%95%E5%85%83,%EF%BC%8C%E7%94%B1%E7%BA%BF%E7%A8%8B%E2%80%8B%20%E2%80%8BID%E2%80%8B%20%E2%80%8B%E3%80%81%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8%E3%80%81%E5%AF%84%E5%AD%98%E5%99%A8%E9%9B%86%E5%90%88%E5%92%8C%E6%A0%88%E7%BB%84%E6%88%90%E3%80%82%20%E8%BF%9B%E7%A8%8B%E7%94%B1%E4%B8%80%E4%B8%AA%E6%88%96%E5%A4%9A%E4%B8%AA%E7%BA%BF%E7%A8%8B%E7%BB%84%E6%88%90%EF%BC%9A%20%E2%80%8B%20%E2%80%8BLinux%E2%80%8B%20%E2%80%8B%20%E4%B8%AD%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%BF%9B%E7%A8%8B%E8%87%AA%E7%84%B6%E4%BC%9A%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E4%B8%BB%E7%BA%BF%E7%A8%8B%E3%80%82">进程</a>可以理解为运行的一个程序（QQ,微信,网易音乐,Word,运行中的SpringBoot jar包），由<strong>PCB（进程控制块）、程序段、数据段</strong>组成。可以查看任务管理器重的进程如下<br><img src="/../img/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%BF%9B%E7%A8%8B.png" alt="进程示意图"><br>一个进程在OS中的资源，包含了CPU、内存、磁盘、网络、I&#x2F;O等等。<br>OS支持多任务模型，会有类似上图 可以同时运行多个程序，对比<a href="https://www.zditect.com/main/os/multiprogramming-vs-multitasking.html">多道程序概念</a>。</p><p>每个进程生命周期都会有就绪态，运行态，阻塞态，新建态PCB，终止态五种状态，但前三种为基本态，时间占比较长。</p><p>一个进程至少包含一个线程（主线程）。</p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>一个进程的运行开销重，为了更好的使多道程序并发执行。</p><ol><li><p>线程是CPU使用的基本单元，<strong>由线程ID、程序计数器、寄存器集合和栈组成</strong>。</p></li><li><p>进程由一个或多个线程组成：创建一个进程会伴随着创建一个线程（主线程）</p></li><li><p>调度切换：<a href="https://blog.51cto.com/u_15773567/5722534#:~:text=%E7%BA%BF%E7%A8%8B%E6%98%AF%20%E2%80%8B%20%E2%80%8B%20CPU%20%E2%80%8B%20%E2%80%8B%20%E2%80%8B%20%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8D%95%E5%85%83,%EF%BC%8C%E7%94%B1%E7%BA%BF%E7%A8%8B%E2%80%8B%20%E2%80%8BID%E2%80%8B%20%E2%80%8B%E3%80%81%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8%E3%80%81%E5%AF%84%E5%AD%98%E5%99%A8%E9%9B%86%E5%90%88%E5%92%8C%E6%A0%88%E7%BB%84%E6%88%90%E3%80%82%20%E8%BF%9B%E7%A8%8B%E7%94%B1%E4%B8%80%E4%B8%AA%E6%88%96%E5%A4%9A%E4%B8%AA%E7%BA%BF%E7%A8%8B%E7%BB%84%E6%88%90%EF%BC%9A%20%E2%80%8B%20%E2%80%8BLinux%E2%80%8B%20%E2%80%8B%20%E4%B8%AD%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%BF%9B%E7%A8%8B%E8%87%AA%E7%84%B6%E4%BC%9A%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E4%B8%BB%E7%BA%BF%E7%A8%8B%E3%80%82">线程上下问切换比进程上下文切换快</a></p></li></ol><p>创建进程：需要为进程划分一整块完整内存，需要大量初始化操作，比如要把内存分段（堆栈、正文区等）。</p><p>创建线程：只需要确定PC指针和寄存器的值，并且给线程分配一个栈用于执行程序，同一个进程的多个线程间可以复用堆栈。</p><p><img src="/../img/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B.jpg" alt="多线程进程"></p><p>一个进程可以划分为多线程（并发）的重要前提：通过线程之间的通信，保证数据<strong>原子性、可见性、有序性</strong></p><h4 id="原子性（atom）"><a href="#原子性（atom）" class="headerlink" title="原子性（atom）"></a>原子性（atom）</h4><p>一个或多个操作，要么全部执行且在执行过程中不被任何因素打断，要么全部不执行。在 Java 中，对基本数据类型的变量的读取和赋值操作是原子性操作。</p><p><strong>保证原子性</strong></p><ol><li>synchronized 关键字定义同步块或者同步方法保障原子性</li><li>Lock接口保证原子性</li><li>Atomic类型保障原子性</li></ol><h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><p>当一个线程修改了共享变量的值，其他线程能够看到修改的值<br>JMM通过共享内存实现线程通信</p><p>volatile变量和普通变量<br>volatile变量强行保证了被一个线程修改的变量的数据变量，被刷入内存。代码是一样的，所以其他线程也有volatile变量，但此时他们的volatile变量不生效</p><p><strong>保证可见性</strong></p><ol><li>volatile 关键字标记内存屏障保证可见性</li><li>synchronized 关键字定义同步代码块或者同步方法保障可见性</li><li>Lock接口保障可见性</li><li>Atomic类型保障可见性</li><li>final关键字保障可见性</li></ol><h4 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h4><p>程序执行的顺序按照代码的先后顺序执行<br>JVM存在指令重排，无关系的数据之间的初始，是没有顺序的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">myClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ......<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span>&#123;<br>        a = a+<span class="hljs-number">2</span>;<br>        b = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">B</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(b)&#123;<br>            a = a+<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果上述有多个线程在执行，因为a和b之间在A中执行是无关联的，不同于B。 那么在A中经过指令重排序，可能先执行b &#x3D; true;当还没执行a&#x3D;a+2;时。另一个线程读取到b的true状态,拿着还是a&#x3D;0;的情况就开始做a&#x3D;a+1;<br>解决办法：使用volitile关键字 <code>public int volitile a;</code></p><h3 id="JMM-Java-Memory-Model，Java内存模型"><a href="#JMM-Java-Memory-Model，Java内存模型" class="headerlink" title="JMM(Java Memory Model，Java内存模型)"></a>JMM(Java Memory Model，Java内存模型)</h3><p><img src="/../img/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/JMM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.png" alt="JMM内存模型"></p><p>还有部分笔记后续补上，先赶项目去了。。。</p>]]></content>
    
    
    <categories>
      
      <category>Java并发编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo本地和github文件都更新，但主页却没更新问题</title>
    <link href="/2022/09/30/Hexo%E6%9C%AC%E5%9C%B0%E5%92%8Cgithub%E6%96%87%E4%BB%B6%E9%83%BD%E6%9B%B4%E6%96%B0%EF%BC%8C%E4%BD%86%E4%B8%BB%E9%A1%B5%E5%8D%B4%E6%B2%A1%E6%9B%B4%E6%96%B0%E9%97%AE%E9%A2%98/"/>
    <url>/2022/09/30/Hexo%E6%9C%AC%E5%9C%B0%E5%92%8Cgithub%E6%96%87%E4%BB%B6%E9%83%BD%E6%9B%B4%E6%96%B0%EF%BC%8C%E4%BD%86%E4%B8%BB%E9%A1%B5%E5%8D%B4%E6%B2%A1%E6%9B%B4%E6%96%B0%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h3><p>基于Hexo,今天打算更新一篇解决Python调试博客，但部署在github的个人主页不更新页面。<br>逐步一步一步查阅问题：</p><ol><li>hexo s 本地显示正常</li><li>hexo clean | hexo g 正常</li><li>hexo d 上传github显示正常，文件是已经更新了的版本</li><li>浏览器没显示正常</li></ol><p>从上可以发现是3和4步之间出现问题，对应查阅Github将上传的静态文件是否自动部署成功。<br>解决办法是可能只有干等</p><h3 id="定位问题思路"><a href="#定位问题思路" class="headerlink" title="定位问题思路"></a>定位问题思路</h3><p>查看需要部署的仓库<br><img src="/../img/%E6%96%B0%E9%A1%B5%E9%9D%A2%E4%B8%8D%E6%9B%B4%E6%96%B0/%E9%83%A8%E7%BD%B2%E5%A4%B1%E8%B4%A52.png" alt="进入仓库"></p><p><img src="/../img/%E6%96%B0%E9%A1%B5%E9%9D%A2%E4%B8%8D%E6%9B%B4%E6%96%B0/%E9%83%A8%E7%BD%B2%E5%A4%B1%E8%B4%A51.png" alt="进入github-pages"></p><p><img src="/../img/%E6%96%B0%E9%A1%B5%E9%9D%A2%E4%B8%8D%E6%9B%B4%E6%96%B0/%E9%83%A8%E7%BD%B2%E5%A4%B1%E8%B4%A5.png" alt="查看报错"></p><p>对比阅读 官方文档  <a href="https://docs.github.com/en/rest/deployments/statuses">https://docs.github.com/en/rest/deployments/statuses</a></p><p>state  string  Required<br>The state of the status. When you set a transient deployment to inactive, the deployment will be shown as destroyed in GitHub.</p><p>Can be one of: error, failure, inactive, in_progress, queued, pending, success</p><p>错误在于 due to in progress  上次的部署还没完成，要么取消上次的部署，要么等github挨个处理完</p><h3 id="学习收获"><a href="#学习收获" class="headerlink" title="学习收获"></a>学习收获</h3><ol><li>查阅问题一步一步确定思路，定位出错点 </li><li>多看官方文档，一针见血</li></ol>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ctrl+F5无法运行</title>
    <link href="/2022/09/30/Ctrl-F5%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C/"/>
    <url>/2022/09/30/Ctrl-F5%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h3><p>接上文使用采用实验室K20做深度学习(<a href="https://oowatermelons.github.io/2022/09/23/dl-gpuk20-capacity/">https://oowatermelons.github.io/2022/09/23/dl-gpuk20-capacity/</a>)<br>由于算力限制只能安装  pytorch1.2+python3.6的版本<br><img src="/../img/ctrlf5/ctrl+f5%E4%B8%8D%E8%BF%90%E8%A1%8C.png" alt="环境依赖包"></p><p>但后续出现问题  Ctrl + F5 或者 F5 都无法运行VScode 的python代码，本地尝试了两种方法 </p><ol><li>同个项目内新建python文件，测试快捷键  &#x3D;&gt; 失效</li><li>不同的项目内新建python文件，测试快捷键 &#x3D;&gt; 正常</li></ol><p>初步判断不是编辑器问题，可能是代码依赖包版本的问题</p><h3 id="查找原因"><a href="#查找原因" class="headerlink" title="查找原因"></a>查找原因</h3><p>按照上面的思路，排除网上很多说修改编辑器的解决办法，集中问题在代码依赖包版本上，查阅官方文档<br>A Visual Studio Code extension with rich support for the Python language (for all actively supported versions of the language:&gt;&#x3D;3.7),including features such as IntelliSense (Pylance),linting,debugging,code navigation,code formatting,refactoring,variable explorer,test explorer,and more!<br>找到原因在于python版本过低，VScode的新Python插件不再支持导致。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>由于Pytorch1.2的限制Python版本最高只能是3.6，所以必须降低Python插件的版本至v2020.8.1<br>具体如图所示：<br><img src="/../img/ctrlf5/ctrl+f5%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C.png" alt="更换python插件方法"></p><h3 id="学习收获"><a href="#学习收获" class="headerlink" title="学习收获"></a>学习收获</h3><ol><li>对比分析，抓住问题重点</li><li>不怕看英语，多看官方文档</li></ol>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VScode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-Join</title>
    <link href="/2022/09/28/mysql-join/"/>
    <url>/2022/09/28/mysql-join/</url>
    
    <content type="html"><![CDATA[<h2 id="MysSQL连接分类"><a href="#MysSQL连接分类" class="headerlink" title="MysSQL连接分类"></a>MysSQL连接分类</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ol><li>内连接(inner join)：表a和表b之间的每一行基于对应id列连接后，只取出连接表中匹配的数据，匹配不到的不保留。</li><li>外连接：表a和表b之间的每一行基于对应id列连接后，匹配不到的也会保留，值为NULL。 外连接可以再被划分为左连接和右连接。</li></ol><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>A表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from A;<br></code></pre></td></tr></table></figure><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">id | name<br> 1 |  A1<br> 2 |  A2<br> 3 |  A3<br> 4 |  A4<br></code></pre></td></tr></table></figure><p>B表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from B; // 缺少a_id=4<br></code></pre></td></tr></table></figure><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">id | age | a_id <br> 1 |  11 |  1<br> 2 |  22 |  3<br> 3 |  33 |  2<br> 6 |  66 |  6<br></code></pre></td></tr></table></figure><p><strong>内连接（inner join）</strong><br>selcct * from A as a <strong>inner join</strong> B as b <strong>on</strong> a.id&#x3D; b.a_id;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">selcct * from A as a inner join B as b on a.id= b.a_id;<br></code></pre></td></tr></table></figure><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">id | name | id | age | a_id <br> 1 |  A1  |  1 |  11 |  1<br> 2 |  A2  |  3 |  33 |  2                <br> 3 |  A3  |  2 |  22 |  3<br></code></pre></td></tr></table></figure><p>只会保留有对应匹配的连接表中的行</p><p><strong>外连接（outer join）</strong></p><ul><li>左连接（left outer join）：以左边的表为主表</li><li>右连接（right outer join）：以右边的表为主表</li></ul><p>左连接<br>A表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from A;<br></code></pre></td></tr></table></figure><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">id | name<br> 1 |  A1<br> 2 |  A2<br> 3 |  A3<br> 4 |  A4<br></code></pre></td></tr></table></figure><p>B表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from B; // 缺少a_id=4 故意错位a_id和b.id 的2 和 3<br></code></pre></td></tr></table></figure><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">id | age | a_id <br> 1 |  11 |  1<br> 2 |  22 |  3<br> 3 |  33 |  2<br> 6 |  66 |  6<br></code></pre></td></tr></table></figure><hr><p>selcct * from A as a <strong>left join</strong> B as b <strong>on</strong> a.id&#x3D; b.a_id;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">selcct * from A as a left join B as b on a.id= b.a_id;<br></code></pre></td></tr></table></figure><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">id | name | id | age | a_id <br> 1 |  A1  |  1 |  11 |  1<br> 2 |  A2  |  3 |  33 |  2                <br> 3 |  A3  |  2 |  22 |  3<br> 4 |  A4  |  NULL | NULL | NULL <br></code></pre></td></tr></table></figure><p>右连接</p><hr><p>selcct * from A as a <strong>right join</strong> B as b <strong>on</strong> a.id&#x3D; b.a_id;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">selcct * from A as a right join B as b on a.id= b.a_id;<br></code></pre></td></tr></table></figure><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">id |  name | id | age | a_id |  <br> 1 |  A1   |  1 |  11 |  1   |      <br> 3 |  A2   |  2 |  33 |  3   |                 <br> 2 |  A3   |  3 |  22 |  2   |  <br> NULL| NULL |  6 | 66 |  6   |<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DL-gpu-k20-capacity</title>
    <link href="/2022/09/23/dl-gpuk20-capacity/"/>
    <url>/2022/09/23/dl-gpuk20-capacity/</url>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>计划使用实验室淘汰的Tesla K20显卡跑代码，但训练报错CUDA error: no kernel image is available for execution on the device</p><p>查找资料（<a href="https://developer.nvidia.com/cuda-gpus#collapseOne%EF%BC%89">https://developer.nvidia.com/cuda-gpus#collapseOne）</a> 显示是因为K20算力不够。</p><!-- ![Nvidia显卡算力图](/img/gpu.png) --><p><img src="/../img/gpu.png" alt="Nvidia显卡算力图"></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>一：降低pytorch,测试后发现1.4及以上版本最低算力已经不支持3.5的K20</p><p>二：更换显卡更强硬件</p><p>三：重新编译pytorch参照链接 <a href="https://blog.csdn.net/qq_43051923/article/details/108393510">https://blog.csdn.net/qq_43051923/article/details/108393510</a>  但建议优选方法一，实在不行才选择这个方案。（把精力花在调试代码为先，能pytorch1.2运行，就刚好节省时间）</p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GPU</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
